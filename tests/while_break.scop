start: 45
end: 294
context: '[N] -> {  : N <= 2147483647 and N >= -2147483648 }'
arrays:
- context: '{  :  }'
  extent: '[N] -> { __pet_test_0[t] : t >= 0 }'
  value_bounds: '{ [i0] : i0 >= 0 and i0 <= 1 }'
  element_type: int
  element_size: 4
  uniquely_defined: 1
- context: '{  :  }'
  extent: '[N] -> { __pet_test_1[t] : N = 0 and t >= 1; __pet_test_1[0] }'
  value_bounds: '{ [i0] : i0 >= 0 and i0 <= 1 }'
  element_type: int
  element_size: 4
  uniquely_defined: 1
- context: '{  :  }'
  extent: '[N] -> { __pet_test_2[t] : t >= 0 }'
  value_bounds: '{ [i0] : i0 >= 0 and i0 <= 1 }'
  element_type: int
  element_size: 4
  uniquely_defined: 1
- context: '{  :  }'
  extent: '[N] -> { __pet_test_3[t] : t >= 0 }'
  value_bounds: '{ [i0] : i0 >= 0 and i0 <= 1 }'
  element_type: int
  element_size: 4
  uniquely_defined: 1
- context: '{  :  }'
  extent: '[N] -> { a[] }'
  element_type: int
  element_size: 4
statements:
- line: 10
  domain: '[N] -> { S_0[t] : N = 0 and t >= 1; S_0[0] }'
  schedule: '[N] -> { S_0[t] -> [0, t, 0] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N] -> { S_0[t] -> a[] }'
      reference: __pet_ref_0
      read: 0
      write: 1
    - type: access
      relation: '[N] -> { S_0[t] -> [5] }'
      reference: __pet_ref_1
      read: 1
      write: 0
- line: 13
  domain: '[N] -> { S_1[t] : N = 0 and t >= 1; S_1[0] : N = 0 }'
  schedule: '[N] -> { S_1[t] -> [0, t, 2] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N] -> { S_1[t] -> a[] }'
      reference: __pet_ref_2
      read: 0
      write: 1
    - type: access
      relation: '[N] -> { S_1[t] -> [6] }'
      reference: __pet_ref_3
      read: 1
      write: 0
- line: 16
  domain: '[N] -> { [S_2[t] -> [0]] : t >= 0 }'
  schedule: '{ S_2[t] -> [1, t, 0] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N] -> { S_2[t] -> a[] }'
      reference: __pet_ref_5
      read: 0
      write: 1
    - type: access
      relation: '[N] -> { S_2[t] -> [5] }'
      reference: __pet_ref_6
      read: 1
      write: 0
  arguments:
  - type: access
    relation: '[N] -> { S_2[t] -> __pet_test_0[o0] : o0 >= 0 and o0 <= -1 + t }'
    reference: __pet_ref_4
    read: 1
    write: 0
- line: 17
  domain: '[N] -> { [S_3[t] -> [0]] : t >= 0 }'
  schedule: '{ S_3[t] -> [1, t, 1, 0] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N] -> { S_3[t] -> __pet_test_0[t] }'
      reference: __pet_ref_8
      read: 0
      write: 1
    - type: call
      name: f
  arguments:
  - type: access
    relation: '[N] -> { S_3[t] -> __pet_test_0[o0] : o0 >= 0 and o0 <= -1 + t }'
    reference: __pet_ref_7
    read: 1
    write: 0
- line: 19
  domain: '[N] -> { [S_4[t] -> [0]] : t >= 0 }'
  schedule: '{ S_4[t] -> [1, t, 2] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N] -> { S_4[t] -> a[] }'
      reference: __pet_ref_10
      read: 0
      write: 1
    - type: access
      relation: '[N] -> { S_4[t] -> [6] }'
      reference: __pet_ref_11
      read: 1
      write: 0
  arguments:
  - type: access
    relation: '[N] -> { S_4[t] -> __pet_test_0[o0] : o0 >= 0 and o0 <= -1 + t; S_4[t]
      -> __pet_test_0[t] }'
    reference: __pet_ref_9
    read: 1
    write: 0
- line: 21
  domain: '[N] -> { [S_5[t] -> [1]] : N = 0 and t >= 1; [S_5[0] -> [1]] }'
  schedule: '[N] -> { S_5[t] -> [2, t, 0] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N] -> { S_5[t] -> __pet_test_1[t] }'
      reference: __pet_ref_13
      read: 0
      write: 1
    - type: call
      name: f
  arguments:
  - type: access
    relation: '[N] -> { S_5[t] -> __pet_test_1[o0] : N = 0 and o0 >= 1 and o0 <= -1
      + t; S_5[t] -> __pet_test_1[0] : t >= 1 }'
    reference: __pet_ref_12
    read: 1
    write: 0
- line: 22
  domain: '[N] -> { [S_6[t] -> [1]] : N = 0 and t >= 1; [S_6[0] -> [1]] }'
  schedule: '[N] -> { S_6[t] -> [2, t, 1, 0] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N] -> { S_6[t] -> a[] }'
      reference: __pet_ref_15
      read: 0
      write: 1
    - type: access
      relation: '[N] -> { S_6[t] -> [5] }'
      reference: __pet_ref_16
      read: 1
      write: 0
  arguments:
  - type: access
    relation: '[N] -> { S_6[t] -> __pet_test_1[o0] : N = 0 and o0 >= 1 and o0 <= t;
      S_6[t] -> __pet_test_1[0] }'
    reference: __pet_ref_14
    read: 1
    write: 0
- line: 25
  domain: '[N] -> { [S_7[t] -> [1]] : N = 0 and t >= 1; [S_7[0] -> [1]] : N = 0 }'
  schedule: '[N] -> { S_7[t] -> [2, t, 1, 2] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N] -> { S_7[t] -> a[] }'
      reference: __pet_ref_18
      read: 0
      write: 1
    - type: access
      relation: '[N] -> { S_7[t] -> [6] }'
      reference: __pet_ref_19
      read: 1
      write: 0
  arguments:
  - type: access
    relation: '[N] -> { S_7[t] -> __pet_test_1[o0] : o0 >= 1 and o0 <= t; S_7[t] ->
      __pet_test_1[0] }'
    reference: __pet_ref_17
    read: 1
    write: 0
- line: 27
  domain: '[N] -> { [S_8[t] -> [1, 0]] : t >= 0 }'
  schedule: '{ S_8[t] -> [3, t, 0] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N] -> { S_8[t] -> __pet_test_2[t] }'
      reference: __pet_ref_22
      read: 0
      write: 1
    - type: call
      name: f
  arguments:
  - type: access
    relation: '[N] -> { S_8[t] -> __pet_test_2[o0] : o0 >= 0 and o0 <= -1 + t }'
    reference: __pet_ref_20
    read: 1
    write: 0
  - type: access
    relation: '[N] -> { S_8[t] -> __pet_test_3[o0] : o0 >= 0 and o0 <= -1 + t }'
    reference: __pet_ref_21
    read: 1
    write: 0
- line: 28
  domain: '[N] -> { [S_9[t] -> [1, 0]] : t >= 0 }'
  schedule: '{ S_9[t] -> [3, t, 1, 0] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N] -> { S_9[t] -> a[] }'
      reference: __pet_ref_25
      read: 0
      write: 1
    - type: access
      relation: '[N] -> { S_9[t] -> [5] }'
      reference: __pet_ref_26
      read: 1
      write: 0
  arguments:
  - type: access
    relation: '[N] -> { S_9[t] -> __pet_test_2[o0] : o0 >= 0 and o0 <= t }'
    reference: __pet_ref_23
    read: 1
    write: 0
  - type: access
    relation: '[N] -> { S_9[t] -> __pet_test_3[o0] : o0 >= 0 and o0 <= -1 + t }'
    reference: __pet_ref_24
    read: 1
    write: 0
- line: 29
  domain: '[N] -> { [S_10[t] -> [1, 0]] : t >= 0 }'
  schedule: '{ S_10[t] -> [3, t, 1, 1, 0] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N] -> { S_10[t] -> __pet_test_3[t] }'
      reference: __pet_ref_29
      read: 0
      write: 1
    - type: call
      name: f
  arguments:
  - type: access
    relation: '[N] -> { S_10[t] -> __pet_test_2[o0] : o0 >= 0 and o0 <= t }'
    reference: __pet_ref_27
    read: 1
    write: 0
  - type: access
    relation: '[N] -> { S_10[t] -> __pet_test_3[o0] : o0 >= 0 and o0 <= -1 + t }'
    reference: __pet_ref_28
    read: 1
    write: 0
- line: 31
  domain: '[N] -> { [S_11[t] -> [1, 0]] : t >= 0 }'
  schedule: '{ S_11[t] -> [3, t, 1, 2] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N] -> { S_11[t] -> a[] }'
      reference: __pet_ref_32
      read: 0
      write: 1
    - type: access
      relation: '[N] -> { S_11[t] -> [6] }'
      reference: __pet_ref_33
      read: 1
      write: 0
  arguments:
  - type: access
    relation: '[N] -> { S_11[t] -> __pet_test_2[o0] : o0 >= 0 and o0 <= t }'
    reference: __pet_ref_30
    read: 1
    write: 0
  - type: access
    relation: '[N] -> { S_11[t] -> __pet_test_3[o0] : o0 >= 0 and o0 <= -1 + t; S_11[t]
      -> __pet_test_3[t] }'
    reference: __pet_ref_31
    read: 1
    write: 0
