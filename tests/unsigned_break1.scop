start: 40
end: 150
indent: "\t"
context: '{  :  }'
schedule: '{ domain: "{ S_3[]; S_0[k] : 252 <= k <= 257; S_2[]; S_1[k] : 252 <= k
  <= 257 and 256*floor((-1 + k)/256) <= -2 + k }", child: { sequence: [ { filter:
  "{ S_0[k]; S_1[k] }", child: { schedule: "L_0[{ S_0[k] -> [(k)]; S_1[k] -> [(k)]
  }]", child: { sequence: [ { filter: "{ S_0[k] }" }, { filter: "{ S_1[k] }" } ] }
  } }, { filter: "{ S_3[]; S_2[] }", child: { set: [ { filter: "{ S_2[] }" }, { filter:
  "{ S_3[] }" } ] } } ] } }'
arrays:
- context: '{  :  }'
  extent: '{ a[] }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '{ k[] }'
  element_type: unsigned char
  element_size: 1
statements:
- line: 8
  domain: '{ S_0[k] : 252 <= k <= 257 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_0[k] -> a[] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: int
        value: 5
- line: 11
  domain: '{ S_1[k] : 252 <= k <= 257 and 256*floor((-1 + k)/256) <= -2 + k }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_1[k] -> a[] }'
        reference: __pet_ref_1
        read: 0
        write: 1
      - type: int
        value: 6
- line: -1
  domain: '{ S_2[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '{ S_2[] -> k[] }'
        index: '{ S_2[] -> k[] }'
        reference: __pet_ref_2
        kill: 1
- line: -1
  domain: '{ S_3[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '{ S_3[] -> a[] }'
        index: '{ S_3[] -> a[] }'
        reference: __pet_ref_3
        kill: 1
