start: 74
end: 216
indent: '    '
context: '[N] -> {  : N >= 8 and N <= 16 }'
schedule: '{ domain: "[N] -> { S_1[i, j] : i >= 0 and j >= 0 and j <= -1 + N; S_0[i,
  j] : i >= 0 and j >= 0 and j <= -1 + N }", child: { schedule: "[N] -> L_0[{ S_0[i,
  j] -> [(i)]; S_1[i, j] -> [(i)] }]", child: { sequence: [ { filter: "[N] -> { S_0[i,
  j] }", child: { schedule: "[N] -> L_1[{ S_0[i, j] -> [(j)] }]" } }, { filter: "[N]
  -> { S_1[i, j] }", child: { schedule: "[N] -> L_2[{ S_1[i, j] -> [(j)] }]" } } ]
  } } }'
arrays:
- context: '[N] -> {  : N >= 0 }'
  extent: '[N] -> { a[i0] : i0 >= 0 and i0 <= -1 + N }'
  element_type: int
  element_size: 4
- context: '[N] -> {  : N >= 0 }'
  extent: '[N] -> { b[i0] : i0 >= 0 and i0 <= -1 + N }'
  element_type: int
  element_size: 4
statements:
- line: 12
  domain: '[N] -> { S_0[i, j] : j >= 0 and j <= -1 + N and i >= 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N] -> { S_0[i, j] -> a[(j)] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: int
        value: 0
- line: 14
  domain: '[N] -> { S_1[i, j] : j >= 0 and j <= -1 + N and i >= 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N] -> { S_1[i, j] -> b[(j)] }'
        reference: __pet_ref_1
        read: 0
        write: 1
      - type: access
        index: '[N] -> { S_1[i, j] -> a[(j)] }'
        reference: __pet_ref_2
        read: 1
        write: 0
