start: 218
end: 496
indent: "\t"
context: '[N, M] -> {  : N >= 0 and M >= 0 and N <= 2147483647 and M <= 2147483647
  }'
arrays:
- context: '[N] -> {  : N >= 0 }'
  extent: '[N, M] -> { A[i0, i1] : i1 <= 9 and i1 >= 0 and i0 >= 0 and i0 <= -1 +
    N }'
  element_type: int
  element_size: 4
- context: '[N] -> {  : N >= 0 }'
  extent: '[N, M] -> { C[i0] : i0 >= 0 and i0 <= -1 + N }'
  element_type: int
  element_size: 4
- context: '[M, N] -> {  : N >= 0 and M >= 0 }'
  extent: '[N, M] -> { in1[i0, i1] : i0 >= 0 and i0 <= -1 + N and i1 >= 0 and i1 <=
    -1 + M }'
  element_type: int
  element_size: 4
- context: '[N] -> {  : N >= 0 }'
  extent: '[N, M] -> { in2[i0] : i0 >= 0 and i0 <= -1 + N }'
  value_bounds: '{ [i0] : i0 >= -1 and i0 <= 1 }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '[N, M] -> { m[] }'
  element_type: int
  element_size: 4
statements:
- line: 21
  domain: '[N, M] -> { S_0[i] : i >= 0 and i <= -1 + N }'
  schedule: '[N] -> { S_0[i] -> [0, i, 0] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N, M] -> { S_0[i] -> m[] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: op
        operation: +
        arguments:
        - type: access
          index: '[N, M] -> { S_0[i] -> [(i)] }'
          reference: __pet_ref_1
          read: 1
          write: 0
        - type: int
          value: 1
- line: 23
  domain: '[N, M] -> { S_1[i, j] : i >= 0 and i <= -1 + N and j >= 0 and j <= -1 +
    M }'
  schedule: '[N, M] -> { S_1[i, j] -> [0, i, 1, j] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N, M] -> { S_1[i, j] -> m[] }'
        reference: __pet_ref_2
        read: 0
        write: 1
      - type: call
        name: g
        arguments:
        - type: call
          name: h
          arguments:
          - type: access
            index: '[N, M] -> { S_1[i, j] -> m[] }'
            reference: __pet_ref_3
            read: 1
            write: 0
        - type: access
          index: '[N, M] -> { S_1[i, j] -> in1[(i), (j)] }'
          reference: __pet_ref_4
          read: 1
          write: 0
- line: 24
  domain: '[N, M] -> { S_2[i] : i >= 0 and i <= -1 + N }'
  schedule: '[N] -> { S_2[i] -> [0, i, 2] }'
  body:
    type: expression
    expr:
      type: call
      name: compute_row
      arguments:
      - type: call
        name: h
        arguments:
        - type: access
          index: '[N, M] -> { S_2[i] -> m[] }'
          reference: __pet_ref_5
          read: 1
          write: 0
      - type: access
        index: '[N, M] -> { S_2[i] -> A[(i)] }'
        depth: 2
        reference: __pet_ref_6
        read: 0
        write: 1
- line: 26
  domain: '[N, M] -> { S_3[] }'
  schedule: '{ S_3[] -> [1] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N, M] -> { S_3[] -> A[(5), (6)] }'
        reference: __pet_ref_7
        read: 0
        write: 1
      - type: int
        value: 0
- line: 28
  domain: '[N, M] -> { S_4[i] : i >= 0 and i <= -1 + N }'
  schedule: '[N] -> { S_4[i] -> [2, i] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N, M] -> { S_4[i] -> C[(i)] }'
        reference: __pet_ref_8
        read: 0
        write: 1
      - type: op
        operation: '?:'
        arguments:
        - type: access
          index: '[N, M] -> { [S_4[i] -> [i1]] -> [((1) : i1 >= -i and i1 <= -1 +
            N - i; (0) : i = -1 + N and i1 = 1; (0) : i = 0 and i1 = -1)] }'
          reference: __pet_ref_10
          read: 1
          write: 0
          arguments:
          - type: access
            index: '[N, M] -> { S_4[i] -> in2[(i)] }'
            reference: __pet_ref_9
            read: 1
            write: 0
        - type: call
          name: f
          arguments:
          - type: access
            may_read: '[N, M] -> { [S_4[i] -> [i1]] -> A[i + i1, o1] : i1 >= -i and
              i1 <= -1 + N - i }'
            index: '[N, M] -> { [S_4[i] -> [i1]] -> A[((i + i1) : i1 >= -i)] }'
            depth: 2
            reference: __pet_ref_12
            read: 1
            write: 0
            arguments:
            - type: access
              may_read: '[N, M] -> { S_4[i] -> in2[i] }'
              index: '[N, M] -> { S_4[i] -> in2[(i)] }'
              reference: __pet_ref_11
              read: 1
              write: 0
        - type: int
          value: 0
