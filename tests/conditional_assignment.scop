start: 218
end: 496
indent: "\t"
context: '[N, M] -> {  : N >= 0 and M >= 0 and N <= 2147483647 and M <= 2147483647
  }'
schedule: '{ domain: "[N, M] -> { S_8[]; S_6[]; S_0[i] : i >= 0 and i <= -1 + N; S_7[];
  S_1[i, j] : i >= 0 and i <= -1 + N and j >= 0 and j <= -1 + M; S_10[]; S_5[]; S_3[];
  S_4[i] : i >= 0 and i <= -1 + N; S_9[]; S_2[i] : i >= 0 and i <= -1 + N }", child:
  { sequence: [ { filter: "[N, M] -> { S_0[i]; S_1[i, j]; S_2[i] }", child: { schedule:
  "[N, M] -> L_0[{ S_0[i] -> [(i)]; S_1[i, j] -> [(i)]; S_2[i] -> [(i)] }]", child:
  { sequence: [ { filter: "[N, M] -> { S_0[i] }" }, { filter: "[N, M] -> { S_1[i,
  j] }", child: { schedule: "[N, M] -> L_1[{ S_1[i, j] -> [(j)] }]" } }, { filter:
  "[N, M] -> { S_2[i] }" } ] } } }, { filter: "[N, M] -> { S_3[] }" }, { filter: "[N,
  M] -> { S_4[i] }", child: { schedule: "[N] -> L_2[{ S_4[i] -> [(i)] }]" } }, { filter:
  "[N, M] -> { S_8[]; S_6[]; S_7[]; S_10[]; S_5[]; S_9[] }", child: { set: [ { filter:
  "{ S_5[] }" }, { filter: "{ S_6[] }" }, { filter: "{ S_7[] }" }, { filter: "{ S_8[]
  }" }, { filter: "{ S_9[] }" }, { filter: "{ S_10[] }" } ] } } ] } }'
arrays:
- context: '[N] -> {  : N >= 0 }'
  extent: '[N, M] -> { A[i0, i1] : i0 >= 0 and i0 <= -1 + N and i1 <= 9 and i1 >=
    0 }'
  element_type: int
  element_size: 4
- context: '[N] -> {  : N >= 0 }'
  extent: '[N, M] -> { C[i0] : i0 >= 0 and i0 <= -1 + N }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '[N, M] -> { i[] }'
  element_type: int
  element_size: 4
- context: '[M, N] -> {  : N >= 0 and M >= 0 }'
  extent: '[N, M] -> { in1[i0, i1] : i0 >= 0 and i0 <= -1 + N and i1 >= 0 and i1 <=
    -1 + M }'
  element_type: int
  element_size: 4
- context: '[N] -> {  : N >= 0 }'
  extent: '[N, M] -> { in2[i0] : i0 >= 0 and i0 <= -1 + N }'
  value_bounds: '{ [i0] : i0 >= -1 and i0 <= 1 }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '[N, M] -> { j[] }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '[N, M] -> { m[] }'
  element_type: int
  element_size: 4
statements:
- line: 21
  domain: '[N, M] -> { S_0[i] : i >= 0 and i <= -1 + N }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N, M] -> { S_0[i] -> m[] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: op
        operation: +
        arguments:
        - type: access
          index: '[N, M] -> { S_0[i] -> [(i)] }'
          reference: __pet_ref_1
          read: 1
          write: 0
        - type: int
          value: 1
- line: 23
  domain: '[N, M] -> { S_1[i, j] : i >= 0 and i <= -1 + N and j >= 0 and j <= -1 +
    M }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N, M] -> { S_1[i, j] -> m[] }'
        reference: __pet_ref_2
        read: 0
        write: 1
      - type: call
        name: g
        arguments:
        - type: call
          name: h
          arguments:
          - type: access
            index: '[N, M] -> { S_1[i, j] -> m[] }'
            reference: __pet_ref_3
            read: 1
            write: 0
        - type: access
          index: '[N, M] -> { S_1[i, j] -> in1[(i), (j)] }'
          reference: __pet_ref_4
          read: 1
          write: 0
- line: 24
  domain: '[N, M] -> { S_2[i] : i >= 0 and i <= -1 + N }'
  body:
    type: expression
    expr:
      type: call
      name: compute_row
      arguments:
      - type: call
        name: h
        arguments:
        - type: access
          index: '[N, M] -> { S_2[i] -> m[] }'
          reference: __pet_ref_5
          read: 1
          write: 0
      - type: access
        may_read: '[N, M] -> { S_2[i] -> A[i, o1] }'
        may_write: '[N, M] -> { S_2[i] -> A[i, o1] }'
        must_write: '[N, M] -> {  }'
        index: '[N, M] -> { S_2[i] -> A[(i)] }'
        depth: 2
        reference: __pet_ref_6
        read: 1
        write: 1
- line: 26
  domain: '[N, M] -> { S_3[] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N, M] -> { S_3[] -> A[(5), (6)] }'
        reference: __pet_ref_7
        read: 0
        write: 1
      - type: int
        value: 0
- line: 28
  domain: '[N, M] -> { S_4[i] : i >= 0 and i <= -1 + N }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N, M] -> { S_4[i] -> C[(i)] }'
        reference: __pet_ref_8
        read: 0
        write: 1
      - type: op
        operation: '?:'
        arguments:
        - type: access
          index: '[N, M] -> { [S_4[i] -> [i1]] -> [((1) : i1 <= -1 + N - i and i1
            >= -i; (0) : i1 = N - i; (0) : i1 = -1 - i)] }'
          reference: __pet_ref_10
          read: 1
          write: 0
          arguments:
          - type: access
            index: '[N, M] -> { S_4[i] -> in2[(i)] }'
            reference: __pet_ref_9
            read: 1
            write: 0
        - type: call
          name: f
          arguments:
          - type: access
            may_read: '[N, M] -> { [S_4[i] -> [i1]] -> A[i + i1, o1] : i1 <= -1 +
              N - i and i1 >= -i }'
            index: '[N, M] -> { [S_4[i] -> [i1]] -> A[((i + i1) : i1 >= -i)] }'
            depth: 2
            reference: __pet_ref_12
            read: 1
            write: 0
            arguments:
            - type: access
              may_read: '[N, M] -> { S_4[i] -> in2[i] }'
              index: '[N, M] -> { S_4[i] -> in2[(i)] }'
              reference: __pet_ref_11
              read: 1
              write: 0
        - type: int
          value: 0
- line: -1
  domain: '[N, M] -> { S_5[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[N, M] -> { S_5[] -> i[] }'
        index: '[N, M] -> { S_5[] -> i[] }'
        reference: __pet_ref_13
        kill: 1
- line: -1
  domain: '[N, M] -> { S_6[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[N, M] -> { S_6[] -> j[] }'
        index: '[N, M] -> { S_6[] -> j[] }'
        reference: __pet_ref_14
        kill: 1
- line: -1
  domain: '[N, M] -> { S_7[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[N, M] -> { S_7[] -> in1[o0, o1] : o0 >= 0 and o0 <= -1 + N and o1
          >= 0 and o1 <= -1 + M }'
        index: '[N, M] -> { S_7[] -> in1[] }'
        depth: 2
        reference: __pet_ref_15
        kill: 1
- line: -1
  domain: '[N, M] -> { S_8[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[N, M] -> { S_8[] -> in2[o0] : o0 >= 0 and o0 <= -1 + N }'
        index: '[N, M] -> { S_8[] -> in2[] }'
        depth: 1
        reference: __pet_ref_16
        kill: 1
- line: -1
  domain: '[N, M] -> { S_9[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[N, M] -> { S_9[] -> C[o0] : o0 >= 0 and o0 <= -1 + N }'
        index: '[N, M] -> { S_9[] -> C[] }'
        depth: 1
        reference: __pet_ref_17
        kill: 1
- line: -1
  domain: '[N, M] -> { S_10[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[N, M] -> { S_10[] -> m[] }'
        index: '[N, M] -> { S_10[] -> m[] }'
        reference: __pet_ref_18
        kill: 1
