context: '[N, M] -> {  : N >= 0 and M >= 0 and N <= 2147483647 and M <= 2147483647
  }'
arrays:
- context: '[M, N] -> {  : N >= 0 and M >= 0 }'
  extent: '[N, M] -> { in1[i0, i1] : i0 >= 0 and i1 >= 0 and i0 <= -1 + N and i1 <=
    -1 + M }'
  element_type: int
- context: '[N] -> {  : N >= 0 }'
  extent: '[N] -> { in2[i0] : i0 >= 0 and i0 <= -1 + N }'
  value_bounds: '{ [i0] : i0 >= -1 and i0 <= 1 }'
  element_type: int
- context: '[N] -> {  : N >= 0 }'
  extent: '[N] -> { A[i0, i1] : i0 >= 0 and i1 >= 0 and i0 <= -1 + N and i1 <= 9 }'
  element_type: int
- context: '[N] -> {  : N >= 0 }'
  extent: '[N] -> { C[i0] : i0 >= 0 and i0 <= -1 + N }'
  element_type: int
- context: '{  :  }'
  extent: '{ m[] }'
  element_type: int
statements:
- line: 21
  domain: '[N, M] -> { S_0[i] : i >= 0 and i <= -1 + N }'
  schedule: '[N] -> { S_0[i] -> [0, i, 0] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N, M] -> { S_0[i] -> m[] }'
      read: 0
      write: 1
    - type: binary
      operation: +
      arguments:
      - type: access
        relation: '[N, M] -> { S_0[i] -> [i] }'
        read: 1
        write: 0
      - type: access
        relation: '[N, M] -> { S_0[i] -> [1] }'
        read: 1
        write: 0
- line: 23
  domain: '[N, M] -> { S_1[i, j] : j >= 0 and i >= 0 and i <= -1 + N and j <= -1 +
    M }'
  schedule: '[M, N] -> { S_1[i, j] -> [0, i, 1, j] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N, M] -> { S_1[i, j] -> m[] }'
      read: 0
      write: 1
    - type: call
      name: g
      arguments:
      - type: call
        name: h
        arguments:
        - type: access
          relation: '[N, M] -> { S_1[i, j] -> m[] }'
          read: 1
          write: 0
      - type: access
        relation: '[N, M] -> { S_1[i, j] -> in1[i, j] }'
        read: 1
        write: 0
- line: 24
  domain: '[N, M] -> { S_2[i] : i >= 0 and i <= -1 + N }'
  schedule: '[N] -> { S_2[i] -> [0, i, 2] }'
  body:
    type: call
    name: compute_row
    arguments:
    - type: call
      name: h
      arguments:
      - type: access
        relation: '[N, M] -> { S_2[i] -> m[] }'
        read: 1
        write: 0
    - type: access
      relation: '[N, M] -> { S_2[i] -> A[i, o1] }'
      read: 0
      write: 1
- line: 26
  domain: '[N, M] -> { S_3[] }'
  schedule: '{ S_3[] -> [1] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N, M] -> { S_3[] -> A[5, 6] }'
      read: 0
      write: 1
    - type: access
      relation: '[N, M] -> { S_3[] -> [0] }'
      read: 1
      write: 0
- line: 28
  domain: '[N, M] -> { S_4[i] : i >= 0 and i <= -1 + N }'
  schedule: '[N] -> { S_4[i] -> [2, i] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N, M] -> { S_4[i] -> C[i] }'
      read: 0
      write: 1
    - type: ternary
      arguments:
      - type: access
        relation: '[N, M] -> { [S_4[i] -> [i1]] -> [1] : i1 <= -1 + N - i and i1 >=
          -i; [S_4[-1 + N] -> [1]] -> [0]; [S_4[0] -> [-1]] -> [0] }'
        read: 1
        write: 0
        arguments:
        - type: access
          relation: '[N, M] -> { S_4[i] -> in2[i] }'
          read: 1
          write: 0
      - type: call
        name: f
        arguments:
        - type: access
          relation: '[N, M] -> { [S_4[i] -> [i1]] -> A[i + i1, o1] : i1 <= -1 + N
            - i and i1 >= -i }'
          read: 1
          write: 0
          arguments:
          - type: access
            relation: '[N, M] -> { S_4[i] -> in2[i] }'
            read: 1
            write: 0
      - type: access
        relation: '[N, M] -> { [S_4[-1 + N] -> [1]] -> [0]; [S_4[0] -> [-1]] -> [0]
          }'
        read: 1
        write: 0
        arguments:
        - type: access
          relation: '[N, M] -> { S_4[i] -> in2[i] }'
          read: 1
          write: 0
