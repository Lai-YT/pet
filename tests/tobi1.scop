start: 47
end: 131
indent: "\t"
context: '{  :  }'
schedule: '{ domain: "{ S_0[i] : 65*floor((i)/65) = i and 0 <= i <= 1039; S_2[]; S_1[]
  }", child: { sequence: [ { filter: "{ S_0[i] }", child: { schedule: "L_0[{ S_0[i]
  -> [(i)] }]" } }, { filter: "{ S_2[]; S_1[] }", child: { set: [ { filter: "{ S_1[]
  }" }, { filter: "{ S_2[] }" } ] } } ] } }'
arrays:
- context: '{  :  }'
  extent: '{ a[] }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '{ i[] }'
  element_type: unsigned char
  element_size: 1
statements:
- line: 8
  domain: '{ S_0[i] : 65*floor((i)/65) = i and 0 <= i <= 1039 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_0[i] -> a[] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: int
        value: 5
- line: -1
  domain: '{ S_1[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '{ S_1[] -> i[] }'
        index: '{ S_1[] -> i[] }'
        reference: __pet_ref_1
        kill: 1
- line: -1
  domain: '{ S_2[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '{ S_2[] -> a[] }'
        index: '{ S_2[] -> a[] }'
        reference: __pet_ref_2
        kill: 1
