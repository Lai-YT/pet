start: 64
end: 204
context: '[S, n, m] -> {  : (m <= 2147483648 - n and n <= 2147483647 and S >= 0 and
  S <= 2147483647 and n >= -2147483648 and m <= 2147483647 and m >= 0) or (m <= -1
  and n <= 0 and S >= 0 and S <= 2147483647 and m >= -2147483648 and n >= -2147483648)
  }'
arrays:
- context: '[S] -> {  : S >= 0 }'
  extent: '[S, n, m] -> { D[i0] : i0 <= -1 + S and i0 >= 0 }'
  element_type: int
  element_size: 4
statements:
- line: 4
  domain: '[S, n, m] -> { S_0[] }'
  schedule: '{ S_0[] -> [0] }'
  body:
    type: unary
    operation: assume
    arguments:
    - type: access
      relation: '[S, n, m] -> { S_0[] -> [1] : m >= 1 + n; S_0[] -> [0] : m <= n }'
      index: '[S, n, m] -> { S_0[] -> [((1) : m >= 1 + n; (0) : m <= n)] }'
      reference: __pet_ref_0
      read: 1
      write: 0
- line: 6
  domain: '[S, n, m] -> { S_1[i] : i >= 0 and i <= -1 + n }'
  schedule: '[n] -> { S_1[i] -> [1, i, 0] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[S, n, m] -> { S_1[i] -> D[i] }'
      index: '[S, n, m] -> { S_1[i] -> D[(i)] }'
      reference: __pet_ref_1
      read: 0
      write: 1
    - type: access
      relation: '[S, n, m] -> { S_1[i] -> D[m + i] }'
      index: '[S, n, m] -> { S_1[i] -> D[(m + i)] }'
      reference: __pet_ref_2
      read: 1
      write: 0
