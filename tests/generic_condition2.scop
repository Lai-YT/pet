start: 38
end: 144
indent: "\t"
context: '{  :  }'
schedule: '{ domain: "{ S_3[]; S_0[i, j] : 0 <= i <= 4 and j >= i and 5*floor((2 +
  4i)/5) <= 5i - j; S_2[]; S_1[] }", child: { sequence: [ { filter: "{ S_0[i, j] }",
  child: { schedule: "L_0[{ S_0[i, j] -> [(i)] }]", child: { schedule: "L_1[{ S_0[i,
  j] -> [(j)] }]" } } }, { filter: "{ S_3[]; S_2[]; S_1[] }", child: { set: [ { filter:
  "{ S_1[] }" }, { filter: "{ S_2[] }" }, { filter: "{ S_3[] }" } ] } } ] } }'
arrays:
- context: '{  :  }'
  extent: '{ a[] }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '{ i[] }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '{ j[] }'
  element_type: int
  element_size: 4
statements:
- line: 9
  domain: '{ S_0[i, j] : 0 <= i <= 4 and j >= i and 5*floor((2 + 4i)/5) <= 5i - j
    }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_0[i, j] -> a[] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: int
        value: 5
- line: -1
  domain: '{ S_1[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '{ S_1[] -> i[] }'
        index: '{ S_1[] -> i[] }'
        reference: __pet_ref_1
        kill: 1
- line: -1
  domain: '{ S_2[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '{ S_2[] -> j[] }'
        index: '{ S_2[] -> j[] }'
        reference: __pet_ref_2
        kill: 1
- line: -1
  domain: '{ S_3[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '{ S_3[] -> a[] }'
        index: '{ S_3[] -> a[] }'
        reference: __pet_ref_3
        kill: 1
