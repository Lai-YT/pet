start: 31
end: 95
indent: "\t"
context: '{  :  }'
schedule: '{ domain: "{ S_3[]; S_0[]; S_2[]; S_1[] }", child: { sequence: [ { filter:
  "{ S_0[] }" }, { filter: "{ S_1[] }" }, { filter: "{ S_2[] }" }, { filter: "{ S_3[]
  }" } ] } }'
arrays:
- context: '{  :  }'
  extent: '{ a[i0] : i0 >= 0 and i0 <= 9 }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '{ b[] }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '{ c[] }'
  element_type: int
  element_size: 4
statements:
- line: 5
  domain: '{ S_0[] }'
  schedule: '{ S_0[] -> [0] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_0[] -> b[] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: int
        value: 1
- line: 6
  domain: '{ S_1[] }'
  schedule: '{ S_1[] -> [1] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_1[] -> c[] }'
        reference: __pet_ref_1
        read: 0
        write: 1
      - type: access
        index: '{ S_1[] -> [(1)] }'
        reference: __pet_ref_2
        read: 1
        write: 0
- line: 7
  domain: '{ S_2[] }'
  schedule: '{ S_2[] -> [2] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_2[] -> b[] }'
        reference: __pet_ref_3
        read: 0
        write: 1
      - type: int
        value: 2
- line: 8
  domain: '{ S_3[] }'
  schedule: '{ S_3[] -> [3] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_3[] -> a[(1)] }'
        reference: __pet_ref_4
        read: 0
        write: 1
      - type: int
        value: 5
