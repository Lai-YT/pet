start: 143
end: 351
indent: "\t"
context: '{  :  }'
arrays:
- context: '{  :  }'
  extent: '{ M[] }'
  value_bounds: '{ [i0] : i0 >= 0 and i0 <= 100 }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '{ N[] }'
  value_bounds: '{ [i0] : i0 >= 0 and i0 <= 100 }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '{ a[i0, i1] : i0 >= 0 and i1 >= 0 and i0 <= 99 and i1 <= 99 }'
  element_type: int
  element_size: 4
statements:
- line: 13
  domain: '{ S_0[] }'
  schedule: '{ S_0[] -> [0] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_0[] -> N[] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: call
        name: f
- line: 14
  domain: '{ S_1[] }'
  schedule: '{ S_1[] -> [1] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_1[] -> M[] }'
        reference: __pet_ref_1
        read: 0
        write: 1
      - type: call
        name: g
- line: 17
  domain: '{ [S_2[i, j] -> [N, M]] : i >= 0 and j >= 0 and N >= 1 + i and M >= 1 +
    j }'
  schedule: '{ S_2[i, j] -> [2, i, j] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_2[i, j] -> a[(i), (j)] }'
        reference: __pet_ref_4
        read: 0
        write: 1
      - type: op
        operation: +
        arguments:
        - type: access
          index: '{ S_2[i, j] -> [(i)] }'
          reference: __pet_ref_5
          read: 1
          write: 0
        - type: access
          index: '{ S_2[i, j] -> [(j)] }'
          reference: __pet_ref_6
          read: 1
          write: 0
  arguments:
  - type: access
    index: '{ S_2[i, j] -> N[] }'
    reference: __pet_ref_2
    read: 1
    write: 0
  - type: access
    index: '{ S_2[i, j] -> M[] }'
    reference: __pet_ref_3
    read: 1
    write: 0
- line: 20
  domain: '{ [S_3[i, j] -> [N, M]] : i >= 0 and j >= 0 and N >= 1 + i and M >= 1 +
    j }'
  schedule: '{ S_3[i, j] -> [3, i, j] }'
  body:
    type: expression
    expr:
      type: call
      name: h
      arguments:
      - type: access
        index: '{ S_3[i, j] -> [(i)] }'
        reference: __pet_ref_9
        read: 1
        write: 0
      - type: access
        index: '{ S_3[i, j] -> [(j)] }'
        reference: __pet_ref_10
        read: 1
        write: 0
      - type: access
        index: '{ S_3[i, j] -> a[(i), (j)] }'
        reference: __pet_ref_11
        read: 1
        write: 0
  arguments:
  - type: access
    index: '{ S_3[i, j] -> N[] }'
    reference: __pet_ref_7
    read: 1
    write: 0
  - type: access
    index: '{ S_3[i, j] -> M[] }'
    reference: __pet_ref_8
    read: 1
    write: 0
