start: 40
end: 184
indent: "\t"
context: '{  :  }'
arrays:
- context: '{  :  }'
  extent: '{ __pet_test_0[t] : t >= 0 }'
  value_bounds: '{ [i0] : i0 >= 0 and i0 <= 1 }'
  element_type: int
  element_size: 4
  uniquely_defined: 1
- context: '{  :  }'
  extent: '{ __pet_test_1[t] : t >= 0 }'
  value_bounds: '{ [i0] : i0 >= 0 and i0 <= 1 }'
  element_type: int
  element_size: 4
  uniquely_defined: 1
- context: '{  :  }'
  extent: '{ __pet_test_2[t] : t >= 0 }'
  value_bounds: '{ [i0] : i0 >= 0 and i0 <= 1 }'
  element_type: int
  element_size: 4
  uniquely_defined: 1
- context: '{  :  }'
  extent: '{ __pet_test_3[t] : t >= 0 }'
  value_bounds: '{ [i0] : i0 >= 0 and i0 <= 1 }'
  element_type: int
  element_size: 4
  uniquely_defined: 1
- context: '{  :  }'
  extent: '{ a[i0] : i0 >= 0 and i0 <= 99 }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '{ i[] }'
  element_type: int
  element_size: 4
statements:
- line: 8
  domain: '{ S_0[] }'
  schedule: '{ S_0[] -> [0, 0] }'
  body:
    type: op
    operation: =
    arguments:
    - type: access
      relation: '{ S_0[] -> i[] }'
      index: '{ S_0[] -> i[] }'
      reference: __pet_ref_0
      read: 0
      write: 1
    - type: call
      name: f
- line: 8
  domain: '{ [S_1[t] -> [1, 0]] : t >= 0 }'
  schedule: '{ S_1[t] -> [0, 1, t, 0] }'
  body:
    type: op
    operation: =
    arguments:
    - type: access
      relation: '{ S_1[t] -> __pet_test_0[t] }'
      index: '{ S_1[t] -> __pet_test_0[(t)] }'
      reference: __pet_ref_3
      read: 0
      write: 1
    - type: op
      operation: <
      arguments:
      - type: access
        relation: '{ S_1[t] -> i[] }'
        index: '{ S_1[t] -> i[] }'
        reference: __pet_ref_4
        read: 1
        write: 0
      - type: int
        value: 100
  arguments:
  - type: access
    relation: '{ S_1[t] -> __pet_test_0[-1 + t] : t >= 1 }'
    index: '{ S_1[t] -> __pet_test_0[((-1 + t) : t >= 1)] }'
    reference: __pet_ref_1
    read: 1
    write: 0
  - type: access
    relation: '{ S_1[t] -> __pet_test_1[-1 + t] : t >= 1 }'
    index: '{ S_1[t] -> __pet_test_1[((-1 + t) : t >= 1)] }'
    reference: __pet_ref_2
    read: 1
    write: 0
- line: 9
  domain: '{ [S_2[t] -> [1, 0]] : t >= 0 }'
  schedule: '{ S_2[t] -> [0, 1, t, 1, 0] }'
  body:
    type: op
    operation: =
    arguments:
    - type: access
      relation: '{ [S_2[t] -> [i1]] -> a[i1] : i1 >= 0 }'
      index: '{ [S_2[t] -> [i1]] -> a[((i1) : i1 >= 0)] }'
      reference: __pet_ref_8
      read: 0
      write: 1
      arguments:
      - type: access
        relation: '{ S_2[t] -> i[] }'
        index: '{ S_2[t] -> i[] }'
        reference: __pet_ref_7
        read: 1
        write: 0
    - type: int
      value: 0
  arguments:
  - type: access
    relation: '{ S_2[t] -> __pet_test_0[t] }'
    index: '{ S_2[t] -> __pet_test_0[(t)] }'
    reference: __pet_ref_5
    read: 1
    write: 0
  - type: access
    relation: '{ S_2[t] -> __pet_test_1[-1 + t] : t >= 1 }'
    index: '{ S_2[t] -> __pet_test_1[((-1 + t) : t >= 1)] }'
    reference: __pet_ref_6
    read: 1
    write: 0
- line: 10
  domain: '{ [S_3[t] -> [1, 0]] : t >= 0 }'
  schedule: '{ S_3[t] -> [0, 1, t, 1, 1, 0] }'
  body:
    type: op
    operation: =
    arguments:
    - type: access
      relation: '{ S_3[t] -> __pet_test_1[t] }'
      index: '{ S_3[t] -> __pet_test_1[(t)] }'
      reference: __pet_ref_11
      read: 0
      write: 1
    - type: call
      name: f
  arguments:
  - type: access
    relation: '{ S_3[t] -> __pet_test_0[t] }'
    index: '{ S_3[t] -> __pet_test_0[(t)] }'
    reference: __pet_ref_9
    read: 1
    write: 0
  - type: access
    relation: '{ S_3[t] -> __pet_test_1[-1 + t] : t >= 1 }'
    index: '{ S_3[t] -> __pet_test_1[((-1 + t) : t >= 1)] }'
    reference: __pet_ref_10
    read: 1
    write: 0
- line: 12
  domain: '{ [S_4[t] -> [1, 0]] : t >= 0 }'
  schedule: '{ S_4[t] -> [0, 1, t, 1, 2] }'
  body:
    type: op
    operation: =
    arguments:
    - type: access
      relation: '{ [S_4[t] -> [i1]] -> a[i1] : i1 >= 0 }'
      index: '{ [S_4[t] -> [i1]] -> a[((i1) : i1 >= 0)] }'
      reference: __pet_ref_15
      read: 0
      write: 1
      arguments:
      - type: access
        relation: '{ S_4[t] -> i[] }'
        index: '{ S_4[t] -> i[] }'
        reference: __pet_ref_14
        read: 1
        write: 0
    - type: int
      value: 1
  arguments:
  - type: access
    relation: '{ S_4[t] -> __pet_test_0[t] }'
    index: '{ S_4[t] -> __pet_test_0[(t)] }'
    reference: __pet_ref_12
    read: 1
    write: 0
  - type: access
    relation: '{ S_4[t] -> __pet_test_1[t] }'
    index: '{ S_4[t] -> __pet_test_1[(t)] }'
    reference: __pet_ref_13
    read: 1
    write: 0
- line: 13
  domain: '{ [S_5[t] -> [1, 0]] : t >= 0 }'
  schedule: '{ S_5[t] -> [0, 1, t, 1, 3, 0, 0] }'
  body:
    type: op
    operation: =
    arguments:
    - type: access
      relation: '{ S_5[t] -> __pet_test_2[t] }'
      index: '{ S_5[t] -> __pet_test_2[(t)] }'
      reference: __pet_ref_18
      read: 0
      write: 1
    - type: call
      name: f
  arguments:
  - type: access
    relation: '{ S_5[t] -> __pet_test_0[t] }'
    index: '{ S_5[t] -> __pet_test_0[(t)] }'
    reference: __pet_ref_16
    read: 1
    write: 0
  - type: access
    relation: '{ S_5[t] -> __pet_test_1[t] }'
    index: '{ S_5[t] -> __pet_test_1[(t)] }'
    reference: __pet_ref_17
    read: 1
    write: 0
- line: -1
  domain: '{ [S_6[t] -> [1, 0]] : t >= 0 }'
  schedule: '{ S_6[t] -> [0, 1, t, 1, 3, 1] }'
  body:
    type: op
    operation: =
    arguments:
    - type: access
      relation: '{ S_6[t] -> __pet_test_3[t] }'
      index: '{ S_6[t] -> __pet_test_3[(t)] }'
      reference: __pet_ref_21
      read: 0
      write: 1
    - type: op
      operation: '?:'
      arguments:
      - type: access
        relation: '{ S_6[t] -> __pet_test_1[t] }'
        index: '{ S_6[t] -> __pet_test_1[(t)] }'
        reference: __pet_ref_22
        read: 1
        write: 0
      - type: access
        relation: '{ S_6[t] -> [1] }'
        index: '{ S_6[t] -> [(1)] }'
        reference: __pet_ref_23
        read: 1
        write: 0
      - type: access
        relation: '{ [S_6[t] -> [0]] -> __pet_test_2[t] }'
        index: '{ [S_6[t] -> [__pet_test_1]] -> __pet_test_2[(t)] }'
        reference: __pet_ref_25
        read: 1
        write: 0
        arguments:
        - type: access
          relation: '{ S_6[t] -> __pet_test_1[t] }'
          index: '{ S_6[t] -> __pet_test_1[(t)] }'
          reference: __pet_ref_24
          read: 1
          write: 0
  arguments:
  - type: access
    relation: '{ S_6[t] -> __pet_test_0[t] }'
    index: '{ S_6[t] -> __pet_test_0[(t)] }'
    reference: __pet_ref_19
    read: 1
    write: 0
  - type: access
    relation: '{ S_6[t] -> __pet_test_1[-1 + t] : t >= 1 }'
    index: '{ S_6[t] -> __pet_test_1[((-1 + t) : t >= 1)] }'
    reference: __pet_ref_20
    read: 1
    write: 0
- line: 15
  domain: '{ [S_7[t] -> [1, 0, 0]] : t >= 0 }'
  schedule: '{ S_7[t] -> [0, 1, t, 1, 4] }'
  body:
    type: op
    operation: =
    arguments:
    - type: access
      relation: '{ [S_7[t] -> [i1]] -> a[i1] : i1 >= 0 }'
      index: '{ [S_7[t] -> [i1]] -> a[((i1) : i1 >= 0)] }'
      reference: __pet_ref_30
      read: 0
      write: 1
      arguments:
      - type: access
        relation: '{ S_7[t] -> i[] }'
        index: '{ S_7[t] -> i[] }'
        reference: __pet_ref_29
        read: 1
        write: 0
    - type: int
      value: 2
  arguments:
  - type: access
    relation: '{ S_7[t] -> __pet_test_0[t] }'
    index: '{ S_7[t] -> __pet_test_0[(t)] }'
    reference: __pet_ref_26
    read: 1
    write: 0
  - type: access
    relation: '{ S_7[t] -> __pet_test_1[-1 + t] : t >= 1 }'
    index: '{ S_7[t] -> __pet_test_1[((-1 + t) : t >= 1)] }'
    reference: __pet_ref_27
    read: 1
    write: 0
  - type: access
    relation: '{ S_7[t] -> __pet_test_3[t] }'
    index: '{ S_7[t] -> __pet_test_3[(t)] }'
    reference: __pet_ref_28
    read: 1
    write: 0
- line: 8
  domain: '{ [S_8[t] -> [1, 0]] : t >= 0 }'
  schedule: '{ S_8[t] -> [0, 1, t, 2] }'
  body:
    type: op
    operation: +=
    arguments:
    - type: access
      relation: '{ S_8[t] -> i[] }'
      index: '{ S_8[t] -> i[] }'
      reference: __pet_ref_33
      read: 0
      write: 1
    - type: int
      value: 1
  arguments:
  - type: access
    relation: '{ S_8[t] -> __pet_test_0[t] }'
    index: '{ S_8[t] -> __pet_test_0[(t)] }'
    reference: __pet_ref_31
    read: 1
    write: 0
  - type: access
    relation: '{ S_8[t] -> __pet_test_1[t] }'
    index: '{ S_8[t] -> __pet_test_1[(t)] }'
    reference: __pet_ref_32
    read: 1
    write: 0
implications:
- satisfied: 0
  extension: '{ __pet_test_1[t] -> __pet_test_1[t''] : t'' <= t and t'' >= 0 }'
- satisfied: 1
  extension: '{ __pet_test_0[t] -> __pet_test_0[t''] : t'' <= t and t'' >= 0 }'
