context: '{  :  }'
arrays:
- context: '{  :  }'
  extent: '{ __pet_test_0[i, j] : j >= 0 and j <= 99 and i >= 0 and i <= 99 }'
  value_bounds: '{ [i0] : i0 >= 0 and i0 <= 1 }'
  element_type: int
  element_size: 4
  uniquely_defined: 1
- context: '{  :  }'
  extent: '{ a[i0] : i0 >= 0 and i0 <= 99 }'
  element_type: int
  element_size: 4
statements:
- line: 10
  domain: '{ [S_0[i, j] -> [0]] : i >= 0 and i <= 99 and j >= 0 and j <= 99 }'
  schedule: '{ S_0[i, j] -> [0, i, j, 0] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '{ S_0[i, j] -> a[i] }'
      read: 0
      write: 1
    - type: access
      relation: '{ S_0[i, j] -> [0] }'
      read: 1
      write: 0
  arguments:
  - type: access
    relation: '{ S_0[i, j] -> __pet_test_0[i, o1] : o1 >= 0 and o1 <= -1 + j }'
    read: 1
    write: 0
- line: 11
  domain: '{ [S_1[i, j] -> [0]] : i >= 0 and i <= 99 and j >= 0 and j <= 99 }'
  schedule: '{ S_1[i, j] -> [0, i, j, 1, 0] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '{ S_1[i, j] -> __pet_test_0[i, j] }'
      read: 0
      write: 1
    - type: call
      name: f
  arguments:
  - type: access
    relation: '{ S_1[i, j] -> __pet_test_0[i, o1] : o1 >= 0 and o1 <= -1 + j }'
    read: 1
    write: 0
- line: 13
  domain: '{ [S_2[i, j] -> [0]] : i >= 0 and i <= 99 and j >= 0 and j <= 99 }'
  schedule: '{ S_2[i, j] -> [0, i, j, 2] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '{ S_2[i, j] -> a[i] }'
      read: 0
      write: 1
    - type: binary
      operation: +
      arguments:
      - type: access
        relation: '{ S_2[i, j] -> [i] }'
        read: 1
        write: 0
      - type: access
        relation: '{ S_2[i, j] -> [j] }'
        read: 1
        write: 0
  arguments:
  - type: access
    relation: '{ S_2[i, j] -> __pet_test_0[i, o1] : o1 >= 0 and o1 <= -1 + j; S_2[i,
      j] -> __pet_test_0[i, j] }'
    read: 1
    write: 0
