start: 43
end: 186
indent: "\t"
context: '{  :  }'
schedule: '{ domain: "{ S_0[i, j] : i >= 0 and i <= 99 and j >= 0 and j <= 99; S_2[i,
  j] : i >= 0 and i <= 99 and j >= 0 and j <= 99; S_1[i, j] : i >= 0 and i <= 99 and
  j >= 0 and j <= 99 }", child: { schedule: "L_0[{ S_1[i, j] -> [(i)]; S_0[i, j] ->
  [(i)]; S_2[i, j] -> [(i)] }]", child: { schedule: "L_1[{ S_1[i, j] -> [(j)]; S_0[i,
  j] -> [(j)]; S_2[i, j] -> [(j)] }]", child: { sequence: [ { filter: "{ S_0[i, j]
  }" }, { filter: "{ S_1[i, j] }" }, { filter: "{ S_2[i, j] }" } ] } } } }'
arrays:
- context: '{  :  }'
  extent: '{ __pet_test_0[i, j] : i >= 0 and i <= 99 and j >= 0 and j <= 99 }'
  value_bounds: '{ [i0] : i0 >= 0 and i0 <= 1 }'
  element_type: int
  element_size: 4
  uniquely_defined: 1
- context: '{  :  }'
  extent: '{ a[i0] : i0 >= 0 and i0 <= 99 }'
  element_type: int
  element_size: 4
statements:
- line: 10
  domain: '{ [S_0[i, j] -> [0]] : i >= 0 and i <= 99 and j >= 0 and j <= 99 }'
  schedule: '{ S_0[i, j] -> [0, i, j, 0] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_0[i, j] -> a[(i)] }'
        reference: __pet_ref_1
        read: 0
        write: 1
      - type: int
        value: 0
  arguments:
  - type: access
    index: '{ S_0[i, j] -> __pet_test_0[(i), ((-1 + j) : j >= 1)] }'
    reference: __pet_ref_0
    read: 1
    write: 0
- line: 11
  domain: '{ [S_1[i, j] -> [0]] : i >= 0 and i <= 99 and j >= 0 and j <= 99 }'
  schedule: '{ S_1[i, j] -> [0, i, j, 1, 0] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_1[i, j] -> __pet_test_0[(i), (j)] }'
        reference: __pet_ref_3
        read: 0
        write: 1
      - type: call
        name: f
  arguments:
  - type: access
    index: '{ S_1[i, j] -> __pet_test_0[(i), ((-1 + j) : j >= 1)] }'
    reference: __pet_ref_2
    read: 1
    write: 0
- line: 13
  domain: '{ [S_2[i, j] -> [0]] : i >= 0 and i <= 99 and j >= 0 and j <= 99 }'
  schedule: '{ S_2[i, j] -> [0, i, j, 2] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_2[i, j] -> a[(i)] }'
        reference: __pet_ref_5
        read: 0
        write: 1
      - type: op
        operation: +
        arguments:
        - type: access
          index: '{ S_2[i, j] -> [(i)] }'
          reference: __pet_ref_6
          read: 1
          write: 0
        - type: access
          index: '{ S_2[i, j] -> [(j)] }'
          reference: __pet_ref_7
          read: 1
          write: 0
  arguments:
  - type: access
    index: '{ S_2[i, j] -> __pet_test_0[(i), (j)] }'
    reference: __pet_ref_4
    read: 1
    write: 0
implications:
- satisfied: 0
  extension: '{ __pet_test_0[i, j] -> __pet_test_0[i, j''] : j'' <= j and i <= 99
    and i >= 0 and j'' <= 99 and j'' >= 0 }'
