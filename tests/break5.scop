start: 33
end: 269
indent: "\t"
context: '{  :  }'
schedule: '{ domain: "{ S_0[i, j] : (i <= 89 and i >= 75 and j >= 0 and j <= i) or
  (i <= 9 and i >= 0 and j <= 99 and j >= 0) or (i <= 60 and i >= 10 and j >= 0 and
  j <= i) or (i <= 74 and i >= 61 and j >= 0 and j <= i) or (i <= 99 and i >= 90 and
  j <= 150 - i and j >= 0); S_1[i, j] : (i <= 89 and i >= 75 and j <= 60 and j >=
  0) or (i <= 60 and i >= 10 and j >= 0 and j <= -1 + i) or (i <= 74 and i >= 61 and
  j <= 60 and j >= 0) or (i <= 99 and i >= 90 and j <= 149 - i and j >= 0) }", child:
  { schedule: "L_0[{ S_0[i, j] -> [(i)]; S_1[i, j] -> [(i)] }]", child: { schedule:
  "L_1[{ S_0[i, j] -> [(j)]; S_1[i, j] -> [(j)] }]", child: { sequence: [ { filter:
  "{ S_0[i, j] }" }, { filter: "{ S_1[i, j] }" } ] } } } }'
arrays:
- context: '{  :  }'
  extent: '{ a[i0] : i0 >= 0 and i0 <= 99 }'
  element_type: int
  element_size: 4
statements:
- line: 8
  domain: '{ S_0[i, j] : (i <= 89 and i >= 75 and j >= 0 and j <= i) or (i <= 9 and
    i >= 0 and j <= 99 and j >= 0) or (i <= 60 and i >= 10 and j >= 0 and j <= i)
    or (i <= 74 and i >= 61 and j >= 0 and j <= i) or (i <= 99 and i >= 90 and j <=
    150 - i and j >= 0) }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_0[i, j] -> a[(i)] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: int
        value: 0
- line: 17
  domain: '{ S_1[i, j] : (i <= 89 and i >= 75 and j <= 60 and j >= 0) or (i <= 60
    and i >= 10 and j >= 0 and j <= -1 + i) or (i <= 74 and i >= 61 and j <= 60 and
    j >= 0) or (i <= 99 and i >= 90 and j <= 149 - i and j >= 0) }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_1[i, j] -> a[(i)] }'
        reference: __pet_ref_1
        read: 0
        write: 1
      - type: op
        operation: +
        arguments:
        - type: access
          index: '{ S_1[i, j] -> [(i)] }'
          reference: __pet_ref_2
          read: 1
          write: 0
        - type: access
          index: '{ S_1[i, j] -> [(j)] }'
          reference: __pet_ref_3
          read: 1
          write: 0
