start: 37
end: 145
indent: "\t"
context: '[n] -> {  : n <= 2147483647 and n >= -2147483648 }'
arrays:
- context: '{  :  }'
  extent: '[n] -> { __pet_test_0[i, t] : i <= -1 + n and i >= 0 and t >= 0 }'
  value_bounds: '{ [i0] : i0 >= 0 and i0 <= 1 }'
  element_type: int
  element_size: 4
  uniquely_defined: 1
- context: '{  :  }'
  extent: '[n] -> { j[] }'
  element_type: int
  element_size: 4
  declared: 1
- context: '{  :  }'
  extent: '[n] -> { A[i0] : i0 >= 0 }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '[n] -> { s[] }'
  element_type: int
  element_size: 4
statements:
- line: 6
  domain: '[n] -> { S_0[] }'
  schedule: '{ S_0[] -> [0] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        relation: '[n] -> { S_0[] -> s[] }'
        index: '[n] -> { S_0[] -> s[] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: int
        value: 0
- line: 8
  domain: '[n] -> { S_5[i] : i <= -1 + n and i >= 0 }'
  schedule: '[n] -> { S_5[i] -> [1, i, 0] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        relation: '[n] -> { S_5[i] -> j[] }'
        index: '[n] -> { S_5[i] -> j[] }'
        reference: __pet_ref_1
        read: 0
        write: 0
- line: 8
  domain: '[n] -> { S_1[i] : i <= -1 + n and i >= 0 }'
  schedule: '[n] -> { S_1[i] -> [1, i, 1] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        relation: '[n] -> { S_1[i] -> j[] }'
        index: '[n] -> { S_1[i] -> j[] }'
        reference: __pet_ref_2
        read: 0
        write: 1
      - type: access
        relation: '[n] -> { S_1[i] -> A[i] }'
        index: '[n] -> { S_1[i] -> A[(i)] }'
        reference: __pet_ref_3
        read: 1
        write: 0
- line: 8
  domain: '[n] -> { [S_2[i, t] -> [1]] : i <= -1 + n and i >= 0 and t >= 0 }'
  schedule: '[n] -> { S_2[i, t] -> [1, i, 2, t, 0] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        relation: '[n] -> { S_2[i, t] -> __pet_test_0[i, t] }'
        index: '[n] -> { S_2[i, t] -> __pet_test_0[(i), (t)] }'
        reference: __pet_ref_5
        read: 0
        write: 1
      - type: op
        operation: <
        arguments:
        - type: access
          relation: '[n] -> { S_2[i, t] -> j[] }'
          index: '[n] -> { S_2[i, t] -> j[] }'
          reference: __pet_ref_6
          read: 1
          write: 0
        - type: int
          value: 10
  arguments:
  - type: access
    relation: '[n] -> { S_2[i, t] -> __pet_test_0[i, -1 + t] : t >= 1 }'
    index: '[n] -> { S_2[i, t] -> __pet_test_0[(i), ((-1 + t) : t >= 1)] }'
    reference: __pet_ref_4
    read: 1
    write: 0
- line: 9
  domain: '[n] -> { [S_3[i, t] -> [1]] : i <= -1 + n and i >= 0 and t >= 0 }'
  schedule: '[n] -> { S_3[i, t] -> [1, i, 2, t, 1] }'
  body:
    type: expression
    expr:
      type: op
      operation: ++
      arguments:
      - type: access
        relation: '[n] -> { S_3[i, t] -> s[] }'
        index: '[n] -> { S_3[i, t] -> s[] }'
        reference: __pet_ref_8
        read: 1
        write: 1
  arguments:
  - type: access
    relation: '[n] -> { S_3[i, t] -> __pet_test_0[i, t] }'
    index: '[n] -> { S_3[i, t] -> __pet_test_0[(i), (t)] }'
    reference: __pet_ref_7
    read: 1
    write: 0
- line: 8
  domain: '[n] -> { [S_4[i, t] -> [1]] : i <= -1 + n and i >= 0 and t >= 0 }'
  schedule: '[n] -> { S_4[i, t] -> [1, i, 2, t, 2] }'
  body:
    type: expression
    expr:
      type: op
      operation: +=
      arguments:
      - type: access
        relation: '[n] -> { S_4[i, t] -> j[] }'
        index: '[n] -> { S_4[i, t] -> j[] }'
        reference: __pet_ref_10
        read: 0
        write: 1
      - type: int
        value: 1
  arguments:
  - type: access
    relation: '[n] -> { S_4[i, t] -> __pet_test_0[i, t] }'
    index: '[n] -> { S_4[i, t] -> __pet_test_0[(i), (t)] }'
    reference: __pet_ref_9
    read: 1
    write: 0
- line: 8
  domain: '[n] -> { S_6[i] : i <= -1 + n and i >= 0 }'
  schedule: '[n] -> { S_6[i] -> [1, i, 3] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        relation: '[n] -> { S_6[i] -> j[] }'
        index: '[n] -> { S_6[i] -> j[] }'
        reference: __pet_ref_11
        read: 0
        write: 0
implications:
- satisfied: 1
  extension: '[n] -> { __pet_test_0[i, t] -> __pet_test_0[i, t''] : t'' <= t and i
    >= 0 and i <= -1 + n and t'' >= 0 }'
