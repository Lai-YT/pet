start: 45
end: 157
indent: "\t"
context: '[N] -> {  : N <= 2147483647 and N >= -2147483648 }'
schedule: '{ domain: "[N] -> { S_1[i, t] : N = 0 and i <= 9 and i >= 0 and t >= 0;
  S_1[0, t] : (N <= -1 and t >= 0) or (N >= 1 and t >= 0); S_0[i, t] : N = 0 and i
  <= 9 and i >= 0 and t >= 0; S_0[0, t] : (N <= -1 and t >= 0) or (N >= 1 and t >=
  0); S_2[i] : N = 0 and i <= 9 and i >= 0 }", child: { schedule: "[N] -> L_0[{ S_1[i,
  t] -> [(i)]; S_0[i, t] -> [(i)]; S_2[i] -> [(i)] }]", child: { sequence: [ { filter:
  "[N] -> { S_1[i, t]; S_0[i, t] }", child: { schedule: "[N] -> L_1[{ S_1[i, t] ->
  [(t)]; S_0[i, t] -> [(t)] }]", child: { sequence: [ { filter: "[N] -> { S_0[i, t]
  }" }, { filter: "[N] -> { S_1[i, t] }" } ] } } }, { filter: "[N] -> { S_2[i] }"
  } ] } } }'
arrays:
- context: '{  :  }'
  extent: '[N] -> { __pet_test_0[i, t] : N = 0 and i <= 9 and i >= 0 and t >= 0; __pet_test_0[0,
    t] : (N <= -1 and t >= 0) or (N >= 1 and t >= 0) }'
  value_bounds: '{ [i0] : i0 >= 0 and i0 <= 1 }'
  element_type: int
  element_size: 4
  uniquely_defined: 1
- context: '{  :  }'
  extent: '[N] -> { a[] }'
  element_type: int
  element_size: 4
statements:
- line: 10
  domain: '[N] -> { [S_0[i, t] -> [1]] : N = 0 and i <= 9 and i >= 0 and t >= 0; [S_0[0,
    t] -> [1]] : (N <= -1 and t >= 0) or (N >= 1 and t >= 0) }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N] -> { S_0[i, t] -> __pet_test_0[(i), (t)] }'
        reference: __pet_ref_1
        read: 0
        write: 1
      - type: call
        name: f
  arguments:
  - type: access
    index: '[N] -> { S_0[i, t] -> __pet_test_0[(i), ((-1 + t) : t >= 1)] }'
    reference: __pet_ref_0
    read: 1
    write: 0
- line: 11
  domain: '[N] -> { [S_1[i, t] -> [1]] : N = 0 and i <= 9 and i >= 0 and t >= 0; [S_1[0,
    t] -> [1]] : (N <= -1 and t >= 0) or (N >= 1 and t >= 0) }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N] -> { S_1[i, t] -> a[] }'
        reference: __pet_ref_3
        read: 0
        write: 1
      - type: int
        value: 5
  arguments:
  - type: access
    index: '[N] -> { S_1[i, t] -> __pet_test_0[(i), (t)] }'
    reference: __pet_ref_2
    read: 1
    write: 0
- line: 14
  domain: '[N] -> { S_2[i] : N = 0 and i <= 9 and i >= 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N] -> { S_2[i] -> a[] }'
        reference: __pet_ref_4
        read: 0
        write: 1
      - type: int
        value: 6
implications:
- satisfied: 1
  extension: '[N] -> { __pet_test_0[i, t] -> __pet_test_0[i, t''] : N = 0 and t''
    <= t and i >= 0 and i <= 9 and t'' >= 0; __pet_test_0[0, t] -> __pet_test_0[0,
    t''] : (N >= 1 and t'' >= 0 and t'' <= t) or (N <= -1 and t'' >= 0 and t'' <=
    t) }'
