start: 95
end: 277
indent: "\t"
context: '[N, K, M] -> {  : K >= 0 and N >= 0 and N <= 2147483647 and K <= 2147483647
  and M <= 2147483647 and M >= -2147483648 }'
schedule: '{ domain: "[M, N, K] -> { S_0[i, j] : i >= 0 and i <= -1 + M and j >= 0
  and j <= -1 + N; S_1[i, j, k] : i >= 0 and i <= -1 + M and j >= 0 and j <= -1 +
  N and k >= 0 and k <= -1 + K }", child: { schedule: "[M, N, K] -> L_0[{ S_0[i, j]
  -> [(i)]; S_1[i, j, k] -> [(i)] }]", child: { schedule: "[M, N, K] -> L_1[{ S_0[i,
  j] -> [(j)]; S_1[i, j, k] -> [(j)] }]", child: { sequence: [ { filter: "[M, N, K]
  -> { S_0[i, j] }" }, { filter: "[M, N, K] -> { S_1[i, j, k] }", child: { schedule:
  "[M, N, K] -> L_2[{ S_1[i, j, k] -> [(k)] }]" } } ] } } } }'
arrays:
- context: '[K] -> {  : K >= 0 }'
  extent: '[N, K, M] -> { A[i0, i1] : i1 >= 0 and i1 <= -1 + K and i0 >= 0 }'
  element_type: float
  element_size: 4
- context: '[N] -> {  : N >= 0 }'
  extent: '[N, K, M] -> { B[i0, i1] : i1 >= 0 and i1 <= -1 + N and i0 >= 0 }'
  element_type: float
  element_size: 4
- context: '[N] -> {  : N >= 0 }'
  extent: '[N, K, M] -> { C[i0, i1] : i1 >= 0 and i1 <= -1 + N and i0 >= 0 }'
  element_type: float
  element_size: 4
  live_out: 1
statements:
- line: 9
  domain: '[N, K, M] -> { S_0[i, j] : i >= 0 and i <= -1 + M and j >= 0 and j <= -1
    + N }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N, K, M] -> { S_0[i, j] -> C[(i), (j)] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: int
        value: 0
- line: 11
  domain: '[N, K, M] -> { S_1[i, j, k] : i >= 0 and i <= -1 + M and j >= 0 and j <=
    -1 + N and k >= 0 and k <= -1 + K }'
  body:
    type: expression
    expr:
      type: op
      operation: +=
      arguments:
      - type: access
        index: '[N, K, M] -> { S_1[i, j, k] -> C[(i), (j)] }'
        reference: __pet_ref_1
        read: 1
        write: 1
      - type: op
        operation: '*'
        arguments:
        - type: access
          index: '[N, K, M] -> { S_1[i, j, k] -> A[(i), (k)] }'
          reference: __pet_ref_2
          read: 1
          write: 0
        - type: access
          index: '[N, K, M] -> { S_1[i, j, k] -> B[(k), (j)] }'
          reference: __pet_ref_3
          read: 1
          write: 0
