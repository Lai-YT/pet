start: 95
end: 277
context: '[N, K, M] -> {  : K >= 0 and N >= 0 and N <= 2147483647 and K <= 2147483647
  and M <= 2147483647 and M >= -2147483648 }'
arrays:
- context: '[K] -> {  : K >= 0 }'
  extent: '[N, K, M] -> { A[i0, i1] : i1 >= 0 and i0 >= 0 and i1 <= -1 + K }'
  element_type: float
  element_size: 4
- context: '[N] -> {  : N >= 0 }'
  extent: '[N, K, M] -> { B[i0, i1] : i1 >= 0 and i0 >= 0 and i1 <= -1 + N }'
  element_type: float
  element_size: 4
- context: '[N] -> {  : N >= 0 }'
  extent: '[N, K, M] -> { C[i0, i1] : i1 >= 0 and i0 >= 0 and i1 <= -1 + N }'
  element_type: float
  element_size: 4
  live_out: 1
statements:
- line: 9
  domain: '[N, K, M] -> { S_0[i, j] : j <= -1 + N and j >= 0 and i <= -1 + M and i
    >= 0 }'
  schedule: '[N, M] -> { S_0[i, j] -> [0, i, j, 0] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N, K, M] -> { S_0[i, j] -> C[i, j] }'
      read: 0
      write: 1
    - type: access
      relation: '[N, K, M] -> { S_0[i, j] -> [0] }'
      read: 1
      write: 0
- line: 11
  domain: '[N, K, M] -> { S_1[i, j, k] : k <= -1 + K and k >= 0 and j <= -1 + N and
    j >= 0 and i <= -1 + M and i >= 0 }'
  schedule: '[K, N, M] -> { S_1[i, j, k] -> [0, i, j, 1, k] }'
  body:
    type: binary
    operation: +=
    arguments:
    - type: access
      relation: '[N, K, M] -> { S_1[i, j, k] -> C[i, j] }'
      read: 1
      write: 1
    - type: binary
      operation: '*'
      arguments:
      - type: access
        relation: '[N, K, M] -> { S_1[i, j, k] -> A[i, k] }'
        read: 1
        write: 0
      - type: access
        relation: '[N, K, M] -> { S_1[i, j, k] -> B[k, j] }'
        read: 1
        write: 0
