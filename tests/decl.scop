start: 95
end: 282
indent: "\t"
context: '[N, K, M] -> {  : 0 <= N <= 2147483647 and 0 <= K <= 2147483647 and -2147483648
  <= M <= 2147483647 }'
schedule: '{ domain: "[N, K, M] -> { S_1[i, j, k] : 0 <= i < M and 0 <= j < N and
  0 <= k < K; S_4[i, j, k] : 0 <= i < M and 0 <= j < N and 0 <= k < K; S_0[i, j] :
  0 <= i < M and 0 <= j < N; S_6[]; S_2[i, j, k] : 0 <= i < M and 0 <= j < N and 0
  <= k < K; S_5[]; S_3[i, j, k] : 0 <= i < M and 0 <= j < N and 0 <= k < K; S_7[]
  }", child: { sequence: [ { filter: "[M, N, K] -> { S_4[i, j, k]; S_0[i, j]; S_1[i,
  j, k]; S_2[i, j, k]; S_3[i, j, k] }", child: { schedule: "[M, N, K] -> L_0[{ S_4[i,
  j, k] -> [(i)]; S_0[i, j] -> [(i)]; S_1[i, j, k] -> [(i)]; S_2[i, j, k] -> [(i)];
  S_3[i, j, k] -> [(i)] }]", child: { schedule: "[M, N, K] -> L_1[{ S_4[i, j, k] ->
  [(j)]; S_0[i, j] -> [(j)]; S_1[i, j, k] -> [(j)]; S_2[i, j, k] -> [(j)]; S_3[i,
  j, k] -> [(j)] }]", child: { sequence: [ { filter: "[M, N, K] -> { S_0[i, j] }"
  }, { filter: "[M, N, K] -> { S_4[i, j, k]; S_1[i, j, k]; S_2[i, j, k]; S_3[i, j,
  k] }", child: { schedule: "[M, N, K] -> L_2[{ S_4[i, j, k] -> [(k)]; S_1[i, j, k]
  -> [(k)]; S_2[i, j, k] -> [(k)]; S_3[i, j, k] -> [(k)] }]", child: { sequence: [
  { filter: "[M, N, K] -> { S_1[i, j, k] }" }, { filter: "[M, N, K] -> { S_2[i, j,
  k] }" }, { filter: "[M, N, K] -> { S_4[i, j, k] }" }, { filter: "[M, N, K] -> {
  S_3[i, j, k] }" } ] } } } ] } } } }, { filter: "[M, N, K] -> { S_6[]; S_5[]; S_7[]
  }", child: { set: [ { filter: "{ S_5[] }" }, { filter: "{ S_6[] }" }, { filter:
  "{ S_7[] }" } ] } } ] } }'
arrays:
- context: '{  :  }'
  extent: '[N, K, M] -> { t[] }'
  element_type: float
  element_size: 4
  declared: 1
- context: '[K] -> {  : K >= 0 }'
  extent: '[N, K, M] -> { A[i0, i1] : i0 >= 0 and 0 <= i1 < K }'
  element_type: float
  element_size: 4
- context: '[N] -> {  : N >= 0 }'
  extent: '[N, K, M] -> { B[i0, i1] : i0 >= 0 and 0 <= i1 < N }'
  element_type: float
  element_size: 4
- context: '[N] -> {  : N >= 0 }'
  extent: '[N, K, M] -> { C[i0, i1] : i0 >= 0 and 0 <= i1 < N }'
  element_type: float
  element_size: 4
- context: '{  :  }'
  extent: '[N, K, M] -> { i[] }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '[N, K, M] -> { j[] }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '[N, K, M] -> { k[] }'
  element_type: int
  element_size: 4
statements:
- line: 8
  domain: '[N, K, M] -> { S_0[i, j] : 0 <= i < M and 0 <= j < N }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N, K, M] -> { S_0[i, j] -> C[(i), (j)] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: int
        value: 0
- line: 10
  domain: '[N, K, M] -> { S_1[i, j, k] : 0 <= i < M and 0 <= j < N and 0 <= k < K
    }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[N, K, M] -> { S_1[i, j, k] -> t[] }'
        index: '[N, K, M] -> { S_1[i, j, k] -> t[] }'
        reference: __pet_ref_1
        kill: 1
- line: 10
  domain: '[N, K, M] -> { S_2[i, j, k] : 0 <= i < M and 0 <= j < N and 0 <= k < K
    }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N, K, M] -> { S_2[i, j, k] -> t[] }'
        reference: __pet_ref_2
        read: 0
        write: 1
      - type: op
        operation: '*'
        arguments:
        - type: access
          index: '[N, K, M] -> { S_2[i, j, k] -> A[(i), (k)] }'
          reference: __pet_ref_3
          read: 1
          write: 0
        - type: access
          index: '[N, K, M] -> { S_2[i, j, k] -> B[(k), (j)] }'
          reference: __pet_ref_4
          read: 1
          write: 0
- line: 11
  domain: '[N, K, M] -> { S_4[i, j, k] : 0 <= i < M and 0 <= j < N and 0 <= k < K
    }'
  body:
    type: expression
    expr:
      type: op
      operation: +=
      arguments:
      - type: access
        index: '[N, K, M] -> { S_4[i, j, k] -> C[(i), (j)] }'
        reference: __pet_ref_5
        read: 1
        write: 1
      - type: access
        index: '[N, K, M] -> { S_4[i, j, k] -> t[] }'
        reference: __pet_ref_6
        read: 1
        write: 0
- line: 10
  domain: '[N, K, M] -> { S_3[i, j, k] : 0 <= i < M and 0 <= j < N and 0 <= k < K
    }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[N, K, M] -> { S_3[i, j, k] -> t[] }'
        index: '[N, K, M] -> { S_3[i, j, k] -> t[] }'
        reference: __pet_ref_7
        kill: 1
- line: -1
  domain: '[N, K, M] -> { S_5[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[N, K, M] -> { S_5[] -> i[] }'
        index: '[N, K, M] -> { S_5[] -> i[] }'
        reference: __pet_ref_8
        kill: 1
- line: -1
  domain: '[N, K, M] -> { S_6[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[N, K, M] -> { S_6[] -> j[] }'
        index: '[N, K, M] -> { S_6[] -> j[] }'
        reference: __pet_ref_9
        kill: 1
- line: -1
  domain: '[N, K, M] -> { S_7[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[N, K, M] -> { S_7[] -> k[] }'
        index: '[N, K, M] -> { S_7[] -> k[] }'
        reference: __pet_ref_10
        kill: 1
