start: 66
end: 259
indent: "\t"
context: '{  :  }'
schedule: '{ domain: "{ S_0[i, j, k, l] : i >= 0 and i <= 9 and j >= 0 and j <= 19
  and k >= 0 and k <= 29 and l >= 0 and l <= 39; S_1[] }", child: { sequence: [ {
  filter: "{ S_0[i, j, k, l] }", child: { schedule: "L_0[{ S_0[i, j, k, l] -> [(i)]
  }]", child: { schedule: "L_1[{ S_0[i, j, k, l] -> [(j)] }]", child: { schedule:
  "L_2[{ S_0[i, j, k, l] -> [(k)] }]", child: { schedule: "L_3[{ S_0[i, j, k, l] ->
  [(l)] }]" } } } } }, { filter: "{ S_1[] }" } ] } }'
types:
- name: s
  definition: "struct s {\n    int a[30][40];\n}"
arrays:
- context: '{  :  }'
  extent: '{ s[i0, i1] : i0 >= 0 and i1 >= 0 and i0 <= 9 and i1 <= 19 }'
  element_type: struct s
  element_size: 4800
  element_is_record: 1
- context: '{  :  }'
  extent: '{ s_a[s[i0, i1] -> a[i2, i3]] : i0 >= 0 and i1 >= 0 and i0 <= 9 and i1
    <= 19 and i2 >= 0 and i3 >= 0 and i2 <= 29 and i3 <= 39 }'
  element_type: int
  element_size: 4
statements:
- line: 14
  domain: '{ S_0[i, j, k, l] : i >= 0 and i <= 9 and j >= 0 and j <= 19 and k >= 0
    and k <= 29 and l >= 0 and l <= 39 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '{ S_0[i, j, k, l] -> s_a[s[(i), (j)] -> a[(k), (l)]] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: op
        operation: +
        arguments:
        - type: op
          operation: +
          arguments:
          - type: op
            operation: +
            arguments:
            - type: access
              index: '{ S_0[i, j, k, l] -> [(i)] }'
              reference: __pet_ref_1
              read: 1
              write: 0
            - type: access
              index: '{ S_0[i, j, k, l] -> [(j)] }'
              reference: __pet_ref_2
              read: 1
              write: 0
          - type: access
            index: '{ S_0[i, j, k, l] -> [(k)] }'
            reference: __pet_ref_3
            read: 1
            write: 0
        - type: access
          index: '{ S_0[i, j, k, l] -> [(l)] }'
          reference: __pet_ref_4
          read: 1
          write: 0
- line: -1
  domain: '{ S_1[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '{ S_1[] -> s[o0, o1] : o0 >= 0 and o1 >= 0 and o0 <= 9 and o1 <=
          19 }'
        index: '{ S_1[] -> s[] }'
        depth: 2
        reference: __pet_ref_5
        kill: 1
