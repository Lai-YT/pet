start: 285
end: 840
indent: '    '
context: '[K, N] -> {  : 100 <= K <= 1000 and 8 <= N <= 16 }'
context_value: '[K, N] -> {  : K = 256 }'
schedule: '{ domain: "[N, K] -> { S_5[]; S_2[k, j] : 0 <= k < K and 0 <= j < N; S_3[k,
  j, i] : 0 <= k < K and j >= 0 and j < i < N; S_0[j, i] : j >= 0 and j <= i < N;
  S_7[]; S_6[]; S_1[k, j] : 0 <= k < K and 0 <= j < N; S_4[j, i] : j >= 0 and j <=
  i < N }", child: { sequence: [ { filter: "[N, K] -> { S_0[j, i] }", child: { schedule:
  "[N] -> L_0[{ S_0[j, i] -> [(j)] }]", child: { schedule: "[N] -> L_1[{ S_0[j, i]
  -> [(i)] }]" } } }, { filter: "[N, K] -> { S_1[k, j] }", child: { schedule: "[K,
  N] -> L_2[{ S_1[k, j] -> [(k)] }]", child: { schedule: "[K, N] -> L_3[{ S_1[k, j]
  -> [(j)] }]" } } }, { filter: "[N, K] -> { S_2[k, j]; S_3[k, j, i] }", child: {
  schedule: "[K, N] -> L_4[{ S_2[k, j] -> [(k)]; S_3[k, j, i] -> [(k)] }]", child:
  { schedule: "[K, N] -> L_5[{ S_2[k, j] -> [(j)]; S_3[k, j, i] -> [(j)] }]", child:
  { sequence: [ { filter: "[K, N] -> { S_2[k, j] }" }, { filter: "[K, N] -> { S_3[k,
  j, i] }", child: { schedule: "[K, N] -> L_6[{ S_3[k, j, i] -> [(i)] }]" } } ] }
  } } }, { filter: "[N, K] -> { S_4[j, i] }", child: { schedule: "[N] -> L_7[{ S_4[j,
  i] -> [(j)] }]", child: { schedule: "[N] -> L_8[{ S_4[j, i] -> [(i)] }]" } } },
  { filter: "[N, K] -> { S_5[]; S_7[]; S_6[] }", child: { set: [ { filter: "{ S_5[]
  }" }, { filter: "{ S_6[] }" }, { filter: "{ S_7[] }" } ] } } ] } }'
arrays:
- context: '[N] -> {  : N >= 0 }'
  extent: '[N, K] -> { R[i0, i1] : 0 <= i0 < N and 0 <= i1 < N }'
  element_type: int
  element_size: 4
- context: '[N, K] -> {  : N >= 0 and K >= 0 }'
  extent: '[N, K] -> { X[i0, i1] : 0 <= i0 < K and 0 <= i1 < N }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '[N, K] -> { i[] }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '[N, K] -> { j[] }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '[N, K] -> { k[] }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '[N, K] -> { t[] }'
  element_type: int
  element_size: 4
statements:
- line: 19
  domain: '[N, K] -> { S_0[j, i] : j >= 0 and j <= i < N }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N, K] -> { S_0[j, i] -> R[(j), (i)] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: call
        name: Zero
- line: 23
  domain: '[N, K] -> { S_1[k, j] : 0 <= k < K and 0 <= j < N }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[N, K] -> { S_1[k, j] -> X[(k), (j)] }'
        reference: __pet_ref_1
        read: 0
        write: 1
      - type: call
        name: ReadMatrix
- line: 27
  domain: '[N, K] -> { S_2[k, j] : 0 <= k < K and 0 <= j < N }'
  body:
    type: expression
    expr:
      type: call
      name: Vectorize
      arguments:
      - type: access
        index: '[N, K] -> { S_2[k, j] -> R[(j), (j)] }'
        reference: __pet_ref_2
        read: 1
        write: 0
      - type: access
        index: '[N, K] -> { S_2[k, j] -> X[(k), (j)] }'
        reference: __pet_ref_3
        read: 1
        write: 0
      - type: op
        operation: '&'
        arguments:
        - type: access
          may_read: '[N, K] -> { S_2[k, j] -> R[j, j] }'
          may_write: '[N, K] -> { S_2[k, j] -> R[j, j] }'
          must_write: '[N, K] -> {  }'
          index: '[N, K] -> { S_2[k, j] -> R[(j), (j)] }'
          reference: __pet_ref_4
          read: 1
          write: 1
      - type: op
        operation: '&'
        arguments:
        - type: access
          may_read: '[N, K] -> { S_2[k, j] -> X[k, j] }'
          may_write: '[N, K] -> { S_2[k, j] -> X[k, j] }'
          must_write: '[N, K] -> {  }'
          index: '[N, K] -> { S_2[k, j] -> X[(k), (j)] }'
          reference: __pet_ref_5
          read: 1
          write: 1
      - type: op
        operation: '&'
        arguments:
        - type: access
          may_read: '[N, K] -> { S_2[k, j] -> t[] }'
          may_write: '[N, K] -> { S_2[k, j] -> t[] }'
          must_write: '[N, K] -> {  }'
          index: '[N, K] -> { S_2[k, j] -> t[] }'
          reference: __pet_ref_6
          read: 1
          write: 1
- line: 29
  domain: '[N, K] -> { S_3[k, j, i] : 0 <= k < K and j >= 0 and j < i < N }'
  body:
    type: expression
    expr:
      type: call
      name: Rotate
      arguments:
      - type: access
        index: '[N, K] -> { S_3[k, j, i] -> R[(j), (i)] }'
        reference: __pet_ref_7
        read: 1
        write: 0
      - type: access
        index: '[N, K] -> { S_3[k, j, i] -> X[(k), (i)] }'
        reference: __pet_ref_8
        read: 1
        write: 0
      - type: access
        index: '[N, K] -> { S_3[k, j, i] -> t[] }'
        reference: __pet_ref_9
        read: 1
        write: 0
      - type: op
        operation: '&'
        arguments:
        - type: access
          may_read: '[N, K] -> { S_3[k, j, i] -> R[j, i] }'
          may_write: '[N, K] -> { S_3[k, j, i] -> R[j, i] }'
          must_write: '[N, K] -> {  }'
          index: '[N, K] -> { S_3[k, j, i] -> R[(j), (i)] }'
          reference: __pet_ref_10
          read: 1
          write: 1
      - type: op
        operation: '&'
        arguments:
        - type: access
          may_read: '[N, K] -> { S_3[k, j, i] -> X[k, i] }'
          may_write: '[N, K] -> { S_3[k, j, i] -> X[k, i] }'
          must_write: '[N, K] -> {  }'
          index: '[N, K] -> { S_3[k, j, i] -> X[(k), (i)] }'
          reference: __pet_ref_11
          read: 1
          write: 1
      - type: op
        operation: '&'
        arguments:
        - type: access
          may_read: '[N, K] -> { S_3[k, j, i] -> t[] }'
          may_write: '[N, K] -> { S_3[k, j, i] -> t[] }'
          must_write: '[N, K] -> {  }'
          index: '[N, K] -> { S_3[k, j, i] -> t[] }'
          reference: __pet_ref_12
          read: 1
          write: 1
- line: 34
  domain: '[N, K] -> { S_4[j, i] : j >= 0 and j <= i < N }'
  body:
    type: expression
    expr:
      type: call
      name: WriteMatrix
      arguments:
      - type: access
        index: '[N, K] -> { S_4[j, i] -> R[(j), (i)] }'
        reference: __pet_ref_13
        read: 1
        write: 0
- line: -1
  domain: '[N, K] -> { S_5[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[N, K] -> { S_5[] -> j[] }'
        index: '[N, K] -> { S_5[] -> j[] }'
        reference: __pet_ref_14
        kill: 1
- line: -1
  domain: '[N, K] -> { S_6[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[N, K] -> { S_6[] -> i[] }'
        index: '[N, K] -> { S_6[] -> i[] }'
        reference: __pet_ref_15
        kill: 1
- line: -1
  domain: '[N, K] -> { S_7[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[N, K] -> { S_7[] -> k[] }'
        index: '[N, K] -> { S_7[] -> k[] }'
        reference: __pet_ref_16
        kill: 1
