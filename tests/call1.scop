start: 141
end: 245
indent: "\t"
context: '[n] -> {  : exists (e0 = floor((n)/4): 4e0 = n and n >= 0 and n <= 2147483647)
  }'
schedule: '{ domain: "[n] -> { S_0[]; S_1[i] : exists (e0 = floor((i)/4): 4e0 = i
  and i >= 0 and i <= -1 + n) }", child: { sequence: [ { filter: "[n] -> { S_0[] }"
  }, { filter: "[n] -> { S_1[i] }", child: { schedule: "[n] -> L_0[{ S_1[i] -> [(i)]
  }]" } } ] } }'
arrays:
- context: '[n] -> {  : n >= 0 }'
  extent: '[n] -> { A[i0] : i0 >= 0 and i0 <= -1 + n }'
  element_type: int
  element_size: 4
statements:
- line: 10
  domain: '[n] -> { S_0[] }'
  body:
    type: expression
    expr:
      type: op
      operation: assume
      arguments:
      - type: access
        index: '[n] -> { S_0[] -> [(1)] }'
        reference: __pet_ref_0
        read: 1
        write: 0
- line: 12
  domain: '[n] -> { S_1[i] : exists (e0 = floor((i)/4): 4e0 = i and i >= 0 and i <=
    -4 + n) }'
  body:
    type: expression
    expr:
      type: call
      name: foo
      arguments:
      - type: access
        index: '[n] -> { S_1[i] -> [(i)] }'
        reference: __pet_ref_1
        read: 1
        write: 0
      - type: access
        may_read: '[n] -> { S_1[i] -> A[o0] : o0 <= 3 + i and o0 >= i }'
        may_write: '[n] -> { S_1[i] -> A[o0] : o0 <= 3 + i and o0 >= i }'
        must_write: '[n] -> { S_1[i] -> A[o0] : o0 <= 3 + i and o0 >= i }'
        index: '[n] -> { S_1[i] -> A[] }'
        depth: 1
        reference: __pet_ref_2
        read: 1
        write: 1
