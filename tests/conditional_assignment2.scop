start: 225
end: 507
indent: "\t"
context: '[M, N] -> {  : 0 <= M <= 2147483647 and 0 <= N <= 2147483647 }'
schedule: '{ domain: "[M, N] -> { S_3[i] : 0 <= i < N; S_7[]; S_11[]; S_1[i] : 0 <=
  i < N; S_5[i] : 0 <= i < N; S_10[]; S_0[]; S_9[]; S_2[i, j] : 0 <= i < N and 0 <=
  j < M; S_6[]; S_4[]; S_8[] }", child: { sequence: [ { filter: "[N, M] -> { S_0[]
  }" }, { filter: "[N, M] -> { S_2[i, j]; S_3[i]; S_1[i] }", child: { schedule: "[N,
  M] -> L_0[{ S_2[i, j] -> [(i)]; S_3[i] -> [(i)]; S_1[i] -> [(i)] }]", child: { sequence:
  [ { filter: "[N, M] -> { S_1[i] }" }, { filter: "[N, M] -> { S_2[i, j] }", child:
  { schedule: "[N, M] -> L_1[{ S_2[i, j] -> [(j)] }]" } }, { filter: "[N, M] -> {
  S_3[i] }" } ] } } }, { filter: "[N, M] -> { S_4[] }" }, { filter: "[N, M] -> { S_5[i]
  }", child: { schedule: "[N] -> L_2[{ S_5[i] -> [(i)] }]" } }, { filter: "[N, M]
  -> { S_8[]; S_6[]; S_7[]; S_10[]; S_11[]; S_9[] }", child: { set: [ { filter: "{
  S_6[] }" }, { filter: "{ S_7[] }" }, { filter: "{ S_8[] }" }, { filter: "{ S_9[]
  }" }, { filter: "{ S_10[] }" }, { filter: "{ S_11[] }" } ] } } ] } }'
arrays:
- context: '[N] -> {  : N >= 0 }'
  extent: '[M, N] -> { A[i0, i1] : 0 <= i0 < N and 0 <= i1 <= 9 }'
  element_type: int
  element_size: 4
- context: '[N] -> {  : N >= 0 }'
  extent: '[M, N] -> { C[i0] : 0 <= i0 < N }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '[M, N] -> { i[] }'
  element_type: int
  element_size: 4
- context: '[M, N] -> {  : M >= 0 and N >= 0 }'
  extent: '[M, N] -> { in1[i0, i1] : 0 <= i0 < N and 0 <= i1 < M }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '[M, N] -> { in2[] }'
  value_bounds: '{ [i0] : -1 <= i0 <= 1 }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '[M, N] -> { j[] }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '[M, N] -> { m[] }'
  element_type: int
  element_size: 4
statements:
- line: 21
  domain: '[M, N] -> { S_0[] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[M, N] -> { S_0[] -> in2[] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: call
        name: g2
- line: 23
  domain: '[M, N] -> { S_1[i] : 0 <= i < N }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[M, N] -> { S_1[i] -> m[] }'
        reference: __pet_ref_1
        read: 0
        write: 1
      - type: op
        operation: +
        arguments:
        - type: access
          index: '[M, N] -> { S_1[i] -> [(i)] }'
          reference: __pet_ref_2
          read: 1
          write: 0
        - type: int
          value: 1
- line: 25
  domain: '[M, N] -> { S_2[i, j] : 0 <= i < N and 0 <= j < M }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[M, N] -> { S_2[i, j] -> m[] }'
        reference: __pet_ref_3
        read: 0
        write: 1
      - type: call
        name: g
        arguments:
        - type: call
          name: h
          arguments:
          - type: access
            index: '[M, N] -> { S_2[i, j] -> m[] }'
            reference: __pet_ref_4
            read: 1
            write: 0
        - type: access
          index: '[M, N] -> { S_2[i, j] -> in1[(i), (j)] }'
          reference: __pet_ref_5
          read: 1
          write: 0
- line: 26
  domain: '[M, N] -> { S_3[i] : 0 <= i < N }'
  body:
    type: expression
    expr:
      type: call
      name: compute_row
      arguments:
      - type: call
        name: h
        arguments:
        - type: access
          index: '[M, N] -> { S_3[i] -> m[] }'
          reference: __pet_ref_6
          read: 1
          write: 0
      - type: access
        may_read: '[M, N] -> { S_3[i] -> A[i, o1] }'
        may_write: '[M, N] -> { S_3[i] -> A[i, o1] }'
        must_write: '[M, N] -> {  }'
        index: '[M, N] -> { S_3[i] -> A[(i)] }'
        depth: 2
        reference: __pet_ref_7
        read: 1
        write: 1
- line: 28
  domain: '[M, N] -> { S_4[] }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[M, N] -> { S_4[] -> A[(5), (6)] }'
        reference: __pet_ref_8
        read: 0
        write: 1
      - type: int
        value: 0
- line: 30
  domain: '[M, N] -> { S_5[i] : 0 <= i < N }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[M, N] -> { S_5[i] -> C[(i)] }'
        reference: __pet_ref_9
        read: 0
        write: 1
      - type: op
        operation: '?:'
        arguments:
        - type: access
          index: '[M, N] -> { [S_5[i] -> [i1]] -> [((0) : i1 = N - i; (1) : -i <=
            i1 < N - i; (0) : i1 = -1 - i)] }'
          reference: __pet_ref_11
          read: 1
          write: 0
          arguments:
          - type: access
            index: '[M, N] -> { S_5[i] -> in2[] }'
            reference: __pet_ref_10
            read: 1
            write: 0
        - type: call
          name: f
          arguments:
          - type: access
            may_read: '[M, N] -> { [S_5[i] -> [i1]] -> A[i + i1, o1] : -i <= i1 <
              N - i }'
            index: '[M, N] -> { [S_5[i] -> [i1]] -> A[((i + i1) : i1 >= -i)] }'
            depth: 2
            reference: __pet_ref_13
            read: 1
            write: 0
            arguments:
            - type: access
              may_read: '[M, N] -> { S_5[i] -> in2[] }'
              index: '[M, N] -> { S_5[i] -> in2[] }'
              reference: __pet_ref_12
              read: 1
              write: 0
        - type: int
          value: 0
- line: -1
  domain: '[M, N] -> { S_6[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[M, N] -> { S_6[] -> i[] }'
        index: '[M, N] -> { S_6[] -> i[] }'
        reference: __pet_ref_14
        kill: 1
- line: -1
  domain: '[M, N] -> { S_7[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[M, N] -> { S_7[] -> j[] }'
        index: '[M, N] -> { S_7[] -> j[] }'
        reference: __pet_ref_15
        kill: 1
- line: -1
  domain: '[M, N] -> { S_8[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[M, N] -> { S_8[] -> in1[o0, o1] : 0 <= o0 < N and 0 <= o1 < M }'
        index: '[M, N] -> { S_8[] -> in1[] }'
        depth: 2
        reference: __pet_ref_16
        kill: 1
- line: -1
  domain: '[M, N] -> { S_9[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[M, N] -> { S_9[] -> in2[] }'
        index: '[M, N] -> { S_9[] -> in2[] }'
        reference: __pet_ref_17
        kill: 1
- line: -1
  domain: '[M, N] -> { S_10[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[M, N] -> { S_10[] -> C[o0] : 0 <= o0 < N }'
        index: '[M, N] -> { S_10[] -> C[] }'
        depth: 1
        reference: __pet_ref_18
        kill: 1
- line: -1
  domain: '[M, N] -> { S_11[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[M, N] -> { S_11[] -> m[] }'
        index: '[M, N] -> { S_11[] -> m[] }'
        reference: __pet_ref_19
        kill: 1
