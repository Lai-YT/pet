start: 274
end: 498
context: '[N, M] -> {  : N >= 10 and N <= 1000 and M >= 10 and M <= 1000 }'
arrays:
- context: '[M, N] -> {  : N >= 0 and M >= 0 }'
  extent: '[N, M] -> { in1[i0, i1] : i1 <= -1 + M and i1 >= 0 and i0 <= -1 + N and
    i0 >= 0 }'
  element_type: int
  element_size: 4
- context: '[N] -> {  : N >= 0 }'
  extent: '[N, M] -> { in2[i0] : i0 <= -1 + N and i0 >= 0 }'
  value_bounds: '{ [i0] : i0 >= -1 and i0 <= 1 }'
  element_type: int
  element_size: 4
- context: '[N] -> {  : N >= 0 }'
  extent: '[N, M] -> { A[i0, i1] : i0 >= 0 and i0 <= -1 + N and i1 >= 0 and i1 <=
    9 }'
  element_type: int
  element_size: 4
- context: '[N] -> {  : N >= 0 }'
  extent: '[N, M] -> { C[i0] : i0 <= -1 + N and i0 >= 0 }'
  element_type: int
  element_size: 4
- context: '{  :  }'
  extent: '[N, M] -> { m[] }'
  element_type: int
  element_size: 4
statements:
- line: 23
  domain: '[N, M] -> { S_0[i] : i <= -1 + N and i >= 0 }'
  schedule: '[N] -> { S_0[i] -> [0, i, 0] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N, M] -> { S_0[i] -> m[] }'
      index: '[N, M] -> { S_0[i] -> m[] }'
      reference: __pet_ref_0
      read: 0
      write: 1
    - type: binary
      operation: +
      arguments:
      - type: access
        relation: '[N, M] -> { S_0[i] -> [i] }'
        index: '[N, M] -> { S_0[i] -> [(i)] }'
        reference: __pet_ref_1
        read: 1
        write: 0
      - type: int
        value: 1
- line: 25
  domain: '[N, M] -> { S_1[i, j] : j <= -1 + M and j >= 0 and i <= -1 + N and i >=
    0 }'
  schedule: '[M, N] -> { S_1[i, j] -> [0, i, 1, j] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N, M] -> { S_1[i, j] -> m[] }'
      index: '[N, M] -> { S_1[i, j] -> m[] }'
      reference: __pet_ref_2
      read: 0
      write: 1
    - type: call
      name: g
      arguments:
      - type: call
        name: h
        arguments:
        - type: access
          relation: '[N, M] -> { S_1[i, j] -> m[] }'
          index: '[N, M] -> { S_1[i, j] -> m[] }'
          reference: __pet_ref_3
          read: 1
          write: 0
      - type: access
        relation: '[N, M] -> { S_1[i, j] -> in1[i, j] }'
        index: '[N, M] -> { S_1[i, j] -> in1[(i), (j)] }'
        reference: __pet_ref_4
        read: 1
        write: 0
- line: 26
  domain: '[N, M] -> { S_2[i] : i <= -1 + N and i >= 0 }'
  schedule: '[N] -> { S_2[i] -> [0, i, 2] }'
  body:
    type: call
    name: compute_row
    arguments:
    - type: call
      name: h
      arguments:
      - type: access
        relation: '[N, M] -> { S_2[i] -> m[] }'
        index: '[N, M] -> { S_2[i] -> m[] }'
        reference: __pet_ref_5
        read: 1
        write: 0
    - type: access
      relation: '[N, M] -> { S_2[i] -> A[i, o1] }'
      index: '[N, M] -> { S_2[i] -> A[(i)] }'
      reference: __pet_ref_6
      read: 0
      write: 1
- line: 28
  domain: '[N, M] -> { S_3[] }'
  schedule: '{ S_3[] -> [1] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N, M] -> { S_3[] -> A[5, 6] }'
      index: '[N, M] -> { S_3[] -> A[(5), (6)] }'
      reference: __pet_ref_7
      read: 0
      write: 1
    - type: int
      value: 0
- line: 30
  domain: '[N, M] -> { S_4[i] : i <= -3 + N and i >= 0 }'
  schedule: '[N] -> { S_4[i] -> [2, i] }'
  body:
    type: binary
    operation: =
    arguments:
    - type: access
      relation: '[N, M] -> { S_4[i] -> C[i] }'
      index: '[N, M] -> { S_4[i] -> C[(i)] }'
      reference: __pet_ref_8
      read: 0
      write: 1
    - type: call
      name: f
      arguments:
      - type: access
        relation: '[N, M] -> { [S_4[i] -> [i1]] -> A[1 + i + i1, o1] }'
        index: '[N, M] -> { [S_4[i] -> [i1]] -> A[(1 + i + i1)] }'
        reference: __pet_ref_10
        read: 1
        write: 0
        arguments:
        - type: access
          relation: '[N, M] -> { S_4[i] -> in2[i] }'
          index: '[N, M] -> { S_4[i] -> in2[(i)] }'
          reference: __pet_ref_9
          read: 1
          write: 0
